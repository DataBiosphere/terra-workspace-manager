buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        // This is for the artifactory plugin
        classpath group: 'com.jfrog.artifactory', name: 'com.jfrog.artifactory.gradle.plugin', version: '4.15.2', ext: 'pom'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.15.2'
    id 'org.openapi.generator'
}

group 'bio.terra'
version '0.0.3-SNAPSHOT'
sourceCompatibility = 1.8

// TODO: there may be a better way to supply these values than envvars.
// This and the test below makes sure the build will fail reasonably if you try
// to publish without the environment variables defined.
def artifactory_username = System.getenv('ARTIFACTORY_USERNAME')
def artifactory_password = System.getenv('ARTIFACTORY_PASSWORD')

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(artifactoryPublish) &&
        (artifactory_username == null || artifactory_password == null)) {
        throw new GradleException("Set env vars ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD to publish")
    }
}

repositories {
    mavenCentral()
}

dependencies {
    ext {
        commonsLang3 = "3.9"
        googleApiServicesOauth2 = "v2-rev20190313-1.30.1"
        googleClient = "1.30.7"
        googleCloudStorage = "1.103.1"
        googleOauthClientJetty = "1.30.5"
        jackson = "2.11.0"
        jersey = "2.30.1"
        junit = "4.13"
        swagger = "1.6.0"
        hamcrest = "2.2"
    }

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jackson}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jackson}"
    implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'
    implementation group: 'io.swagger', name: 'swagger-annotations', version: "${swagger}"
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${jersey}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: "${jersey}"
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${jersey}"
    implementation "org.glassfish.jersey.inject:jersey-hk2:${jersey}"
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jackson}"

    testImplementation group: 'junit', name: 'junit', version: '4.13'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}


openApiGenerate {
    generatorName = "java"
    outputDir = "$projectDir/build"
    inputSpec = "$projectDir/../src/main/resources/api/service_openapi.yaml"
    apiPackage = 'bio.terra.workspace.api'
    modelPackage = 'bio.terra.workspace.model'
    invokerPackage = 'bio.terra.workspace.client'
    groupId = "$group"
    id = 'terra-workspace-manager-client'
    library = 'jersey2' // do jersey code generation so we use Jackson JSON
    generateModelTests = false
    generateModelDocumentation = false
    generateApiTests = false
    generateApiDocumentation = false
    configOptions = [
            'dateLibrary': 'java8'  // do java8 code generation
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['build/src/main/java']
        }
    }
}

compileJava.dependsOn tasks.openApiGenerate

publishing {
    publications {
        workspaceManagerClientLibrary(MavenPublication) {
            from components.java
        }
    }
}

artifactory {
    publish {
        contextUrl = 'https://broadinstitute.jfrog.io/broadinstitute/'
        repository {
            repoKey = 'libs-snapshot-local' // The Artifactory repository key to publish to
            username = "${artifactory_username}" // The publisher user name
            password = "${artifactory_password}" // The publisher password
        }
        defaults {
            // This is how we tell the Artifactory Plugin which artifacts should be published to Artifactory.
            // Reference to Gradle publications defined in the build script.
            publications('workspaceManagerClientLibrary')
            publishArtifacts = true
            publishPom = true
        }
    }
}

clean {
    // clean up the leftovers from codegen
    delete "build/"
}
