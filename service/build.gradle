// Project Build Script Classpath
buildscript {
    ext {
        springBootVersion = '3.0.1'
    }
}

// Project Plugins
plugins {
    id 'terra-workspace-manager.java-conventions'

    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.google.cloud.tools.jib' version '3.0.0'
    id 'de.undercouch.download' version '4.1.1'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'ru.vyarus.quality' version '4.5.0'
    id 'org.gradle.test-retry' version '1.4.0'
}

// constants visible to all .gradle files in this project
project.ext {
    artifactGroup = "${group}.workspace"
    includeDir = "$projectDir/gradle"
    openapiOutputDir = "${buildDir}/openapi"
    resourceDir = "${projectDir}/src/main/resources"

    // where to place the Cloud Profiler agent in the container
    cloudProfilerLocation = "/opt/cprof"

    // location for jib extras, including the Java agent
    jibExtraDirectory = "${buildDir}/jib-agents"

    // The path to the default Google service account for the Workspace Manager to run as.
    // Created by scripts/write_config.sh
    googleCredentialsFile = "${rootDir}/config/wsm-sa.json"
}

// A small wrapper around bootRun to run the server instrumented with Jacoco
// code coverage tracking. This is useful for running a local server for
// integration tests, but live environments should use `bootRun` instead and
// should not be instrumented.
// This must live in the same file that the Spring Boot plugin is applied in or
// else it can't find the task type.
task jacocoBootRun(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    environment.put('GOOGLE_APPLICATION_CREDENTIALS', "${googleCredentialsFile}")
    classpath = sourceSets.main.runtimeClasspath
    main('bio.terra.workspace.app.Main')
}

// include order matters, so don't alphabetize
apply(from: "$includeDir/profiler.gradle")
apply(from: "$includeDir/deploy.gradle")
apply(from: "$includeDir/openapi.gradle")
apply(from: "$includeDir/versionProperties.gradle")
apply(from: "$rootDir/gradle/quality.gradle")
apply(from: "$includeDir/taskDependencies.gradle")
apply(from: "$includeDir/dependencies.gradle")
apply(from: "$includeDir/jacoco.gradle")
apply(from: "$includeDir/testing.gradle")
