buildscript {
    ext {
        springBootVersion = '2.4.0'
    }
}

plugins {
    id 'terra-workspace-manager.java-conventions'

    id "com.github.ben-manes.versions" version "0.36.0"
    id "com.google.cloud.tools.jib" version "3.0.0"
    id "de.undercouch.download" version "4.1.1"
    id "org.hidetake.swagger.generator" version "2.18.2"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id 'ru.vyarus.quality' version '4.5.0'
}

// constants visible to all .gradle files in this project
project.ext {
    artifactGroup = "${group}.workspace"
    openapiOutputDir = "${buildDir}/openapi"
    resourceDir = "${projectDir}/src/main/resources"
}

def includeDir = "$projectDir/gradle"

// include order matters, so don't alphabetize
apply(from: "$includeDir/profiler.gradle")
apply(from: "$includeDir/deploy.gradle")
apply(from: "$includeDir/openapi.gradle")
apply(from: "$includeDir/versionProperties.gradle")
apply(from: "$rootDir/gradle/quality.gradle")
apply(from: "$includeDir/taskDependencies.gradle")
apply(from: "$includeDir/dependencies.gradle")

// Testing config

// The path to the default Google service account for the Workspace Manager to run as.
// Created by scripts/write_config.sh
def googleCredentialsFile = "${rootDir}/config/wsm-sa.json"
bootRun {
    environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
}

tasks.withType(Test) {
    environment.put("GOOGLE_APPLICATION_CREDENTIALS", "${googleCredentialsFile}")
    testLogging {
        if (System.getenv('PRINT_STANDARD_STREAMS') == null) {
            events = ["passed", "failed", "skipped", "started"]
        } else {
            events = ["passed", "failed", "skipped", "started", "standard_out", "standard_error"]
        }
    }
}

test {
    useJUnitPlatform {
        includeTags "unit"
    }
    outputs.upToDateWhen { false }
}

task unitTest(type: Test) {
    useJUnitPlatform {
        includeTags "unit"
    }
    outputs.upToDateWhen { false }
    finalizedBy jacocoTestReport
}

task connectedTest(type: Test) {
    environment.put('TEST_ENV', System.getenv("TEST_ENV"))
    useJUnitPlatform {
        includeTags "connected"
    }
    outputs.upToDateWhen { false }
}

task azureTest(type: Test) {
    useJUnitPlatform {
        includeTags "azure"
    }
    outputs.upToDateWhen { false }
}

sourceSets.main.java.srcDir "${openapiOutputDir}/src/main/java"
