openapi: 3.0.3
info:
  title: Workspace Manager API
  description: Workspace Manager REST API to manage workspaces.
  version: 0.0.1

paths:
  # Unauthenticated Paths
  /status:
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        '200':
          description: Service is functional
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '500':
          description: Service is broken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
  /version:
    get:
      security: []
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [Unauthenticated]
      responses:
        '200':
          description: System version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersion'

  # Workspace paths
  /api/workspaces/v1:
    post:
      summary: Create a new Workspace.
      operationId: createWorkspace
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedWorkspaceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/NotFound'

  /api/workspaces/v1/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get an existing Workspace.
      operationId: getWorkspace
      tags: [Workspace]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a Workspace.
      operationId: deleteWorkspace
      tags: [Workspace]
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # TODO(PF-404): remove this in favor of reference-type specific objects.
  /api/workspaces/v1/{id}/datareferences:
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      summary: (DEPRECATED) Create a new data reference in a workspace.
      operationId: createDataReference
      tags: [Workspace]
      requestBody:
        required: true
        description: Stuff TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: (DEPRECATED) Enumerate the data references in a workspace.
      operationId: enumerateReferences
      tags: [Workspace]
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/ReferenceListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # TODO(PF-404): remove this in favor of reference-type specific objects.
  /api/workspaces/v1/{id}/datareferences/{referenceId}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/ReferenceId'
    get:
      summary: (DEPRECATED) Gets a data reference from a workspace.
      operationId: getDataReference
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: (DEPRECATED) Update name or description of a data reference in a workspace.
      operationId: updateDataReference
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataReferenceRequestBody'
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: (DEPRECATED) Deletes a data reference from a workspace.
      operationId: deleteDataReference
      tags: [Workspace]
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # TODO(PF-404): remove this in favor of reference-type specific objects.
  /api/workspaces/v1/{id}/datareferences/{referenceType}/{name}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/ReferenceType'
      - $ref: '#/components/parameters/Name'
    get:
      summary: (DEPRECATED) Gets a data reference from a workspace by name and type.
      operationId: getDataReferenceByName
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/datarepo/snapshots:
    parameters:
    - $ref: '#/components/parameters/Id'
    post:
      summary: Create a new data repo snapshot reference in a workspace.
      operationId: createDataRepoSnapshotReference
      tags: [DataRepoReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataRepoSnapshotReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DataRepoSnapshotReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/datarepo/snapshots/{referenceId}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/ReferenceId'
    get:
      summary: Gets a reference to a snapshot from a workspace.
      operationId: getDataRepoSnapshotReference
      tags: [DataRepoReference]
      responses:
        '200':
          $ref: '#/components/responses/DataRepoSnapshotReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update name or description of a snapshot reference in a workspace.
      operationId: updateDataRepoSnapshotReference
      tags: [DataRepoReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataReferenceRequestBody'
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/datarepo/snapshots/name/{name}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a snapshot by name.
      operationId: getDataRepoSnapshotReferenceByName
      tags: [DataRepoReference]
      responses:
        '200':
          $ref: '#/components/responses/DataRepoSnapshotReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/buckets:
    parameters:
    - $ref: '#/components/parameters/Id'
    post:
      summary: Create a new Google bucket reference in a workspace.
      operationId: createBucketReference
      tags: [GoogleReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGoogleBucketReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GoogleBucketReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/buckets/{referenceId}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/ReferenceId'
    get:
      summary: Gets a reference to a Google bucket from a workspace.
      operationId: getBucketReference
      tags: [GoogleReference]
      responses:
        '200':
          $ref: '#/components/responses/GoogleBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update name or description of a bucket reference in a workspace.
      operationId: updateBucketReference
      tags: [GoogleReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataReferenceRequestBody'
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/buckets/name/{name}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a Google bucket by name.
      operationId: getBucketReferenceByName
      tags: [GoogleReference]
      responses:
        '200':
          $ref: '#/components/responses/GoogleBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/bigquerydatasets:
    parameters:
    - $ref: '#/components/parameters/Id'
    post:
      summary: Create a new BigQuery dataset reference in a workspace.
      operationId: createBigQueryDatasetReference
      tags: [GoogleReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBigQueryDatasetReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/BigQueryDatasetReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/bigquerydatasets/{referenceId}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/ReferenceId'
    get:
      summary: Gets a reference to a BigQuery dataset from a workspace.
      operationId: getBigQueryDatasetReference
      tags: [GoogleReference]
      responses:
        '200':
          $ref: '#/components/responses/BigQueryDatasetReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update name or description of a BigQuery dataset reference in a workspace.
      operationId: updateBigQueryDatasetReference
      tags: [GoogleReference]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataReferenceRequestBody'
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/references/google/bigquerydatasets/name/{name}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a BigQuery dataset by name.
      operationId: getBigQueryDatasetReferenceByName
      tags: [GoogleReference]
      responses:
        '200':
          $ref: '#/components/responses/BigQueryDatasetReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/cloudcontexts:
    parameters:
    - $ref: '#/components/parameters/Id'
    post:
      summary: Create a cloud context for the workspace.
      operationId: createCloudContext
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudContextRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '202':
          $ref: '#/components/responses/JobReportResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/cloudcontexts/result/{jobId}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to create a cloud context.
      operationId: getCreateCloudContextResult
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '202':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/cloudcontexts/{cloudContext}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/CloudContext'
    delete:
      summary: Deletes a cloud context and all of its data from a workspace.
      operationId: deleteCloudContext
      tags: [Workspace]
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/roles:
    parameters:
    - $ref: '#/components/parameters/Id'
    get:
      summary: Read all IAM roles and their members in a workspace.
      operationId: getRoles
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/RoleBindingListResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/roles/{role}/members:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/Role'
    post:
      summary: Grant an IAM role to a user or group.
      operationId: grantRole
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantRoleRequestBody'
      responses:
        '204':
          description: Role granted successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{id}/roles/{role}/members/{memberEmail}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/Role'
    - $ref: '#/components/parameters/MemberEmail'
    delete:
      summary: Remove an IAM role from a user or group.
      operationId: removeRole
      tags: [Workspace]
      responses:
        '204':
          description: Role removed successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  /api/job/v1/jobs/{id}:
    parameters:
    - name: id
      in: path
      description: The unique id provided in JobControl to the async endpoint
      required: true
      schema:
        type: string
    get:
      tags:
      - jobs
      operationId: retrieveJob
      responses:
        200:
          description: Job is complete (succeeded or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        202:
          description: Job is running
          headers:
            Retry-After:
              description: >-
                optional - estimated seconds to wait before polling again. This allows
                a server to offer a hint as to when the job might be complete.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/PermissionDenied'
        404:
          $ref: '#/components/responses/NotFound'

  /api/workspaces/v1/{id}/resources/controlled/google/buckets:
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      summary: Create a new controlled Google bucket
      operationId: createBucket
      tags: [ControlledGoogleResource]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGoogleBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGoogleBucketResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGoogleBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/resources/controlled/google/buckets/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a google bucket creation job.
      operationId: getCreateBucketResult
      tags: [ControlledGoogleResource]
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGoogleBucketResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGoogleBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the workspace manager
      required: true
      schema:
        type: string
        format: uuid

    JobId:
      name: jobId
      in: path
      description: A String ID to used to identify a job
      required: true
      schema:
        type: string

    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
        default: 0

    Limit:
      name: limit
      in: query
      description: The numbers of items to return. Default 10
      schema:
        type: integer
        minimum: 1
        default: 10

    ReferenceId:
      name: referenceId
      in: path
      description: A UUID used to identify a data reference in a workspace
      required: true
      schema:
        type: string
        format: uuid

    ReferenceType:
      name: referenceType
      in: path
      description: The type of a data reference in a workspace
      required: true
      schema:
        $ref: '#/components/schemas/ReferenceTypeEnum'

    Name:
      name: name
      in: path
      description: A name used to identify an object in the workspace manager
      required: true
      schema:
        $ref: '#/components/schemas/Name'

    Role:
      name: role
      in: path
      description: An IAM role
      required: true
      schema:
        $ref: '#/components/schemas/IamRole'

    MemberEmail:
      name: memberEmail
      in: path
      description: A user or group's email. Used for adding or removing IAM permissions
      required: true
      schema:
        type: string

    CloudContext:
      name: cloudContext
      in: path
      description: A cloud which holds context for a workspace.
      required: true
      schema:
        $ref: '#/components/schemas/CloudContext'

  schemas:
    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    JobReport:
      type: object
      required: [id, status, statusCode, resultURL]
      properties:
        id:
          description: caller-provided unique identifier for the job
          type: string
        description:
          description: caller-provided description of the job
          type: string
        status:
          description: status of the job
          type: string
          enum: [RUNNING, SUCCEEDED, FAILED]
        statusCode:
          description: >-
            HTTP code providing completion status of the job. Present if status
            is SUCCEEDED or FAILED.
          type: integer
        submitted:
          description: timestamp when the job was submitted; in ISO-8601 format
          type: string
        completed:
          description: >-
            timestamp when the job completed - in ISO-8601 format. Present if
            status is SUCCEEDED or FAILED.
          type: string
        resultURL:
          description: >-
            URL where the result of the job can be retrieved. Equivalent to a
            Location header in HTTP.
          type: string

    JobControl:
      type: object
      required: [id]
      properties:
        id:
          description: >-
            Unique identifier for the job. Best practice is for job identifier to be a UUID,
            a ShortUUID, or other globally unique identifier.
          type: string
        # TODO: In the future, notification configuration will also be part of JobControl.

    SystemStatus:
      type: object
      required: [ok, systems]
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              critical:
                type: boolean
              messages:
                type: array
                items:
                  type: string
    Name:
      # Note: These format restrictions are enforced by WM, not natively by
      # Swagger.
      type: string
      pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]{0,62}$'
      minLength: 1
      maxLength: 63

    SystemVersion:
      type: object
      required: [gitTag, gitHash, github, build]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

    CreateWorkspaceRequestBody:
      type: object
      required: [id]
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        spendProfile:
          description: ID of provided spend profile
          type: string
        policies:
          description: Policies provided by the containing folder
          type: array
          items:
            type: string
            format: uuid
        jobId:
          description: |
            Optional ID used for idempotency. If multiple requests use the same
            jobId, they will be considered logical duplicates rather than
            unique requests. Sending different requests with the same jobId
            will lead to all but one of the request bodies being ignored.
            This will be randomly generated if not provided in a request.
          type: string
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'

    CreatedWorkspace:
      type: object
      required: [id]
      properties:
        id:
          description: UUID of a newly-created workspace
          type: string
          format: uuid

    WorkspaceDescription:
      type: object
      required: [id]
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        spendProfile:
          description: ID of provided spend profile
          type: string
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'
        googleContext:
          $ref: '#/components/schemas/GoogleContext'

    CloningInstructionsEnum:
      type: string
      description: Instructions for copying this reference when cloning the workspace
      enum: ['COPY_NOTHING', 'COPY_DEFINITION', 'COPY_RESOURCE', 'COPY_REFERENCE']

    ReferenceTypeEnum:
      type: string
      description: The type of a reference, if an uncontrolled resource
      # TODO: swagger-codegen always looks for and removes a common prefix for
      # enum values, which breaks enums that only have a single value.
      # PLACEHOLDER_VALUE should be removed when we have an actual second value
      # to use.
      enum: ['DATA_REPO_SNAPSHOT', 'PLACEHOLDER_VALUE'] #eventually include GCS bucket, etc.

    CloudContext:
      type: string
      description: Enum representing a cloud with additonal workspace context.
      enum: ['GOOGLE']

    CreateCloudContextRequest:
      type: object
      required: [cloudContext, jobControl]
      description: |
        Request body for asynchronously creating a cloud context for a workspace.
        Contains a CloudContext enum and JobControl object.
      properties:
        cloudContext:
          $ref: '#/components/schemas/CloudContext'
        jobControl:
          $ref: '#/components/schemas/JobControl'

    GoogleContext:
      type: object
      description: The Google cloud space associated with a workspace.
      properties:
        projectId:
          description: The ID of Google Project associated with the workspace.
          type: string

    CreateCloudContextResult:
      type: object
      description: |
        The result of a call to create a cloud context for a workspace. Contains
        a JobReport detailing the async operation and either a GoogleContext
        or an ErrorReport detailing an error.
      required: [jobReport]
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        googleContext:
          $ref: '#/components/schemas/GoogleContext'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'

    # TODO(PF-404): remove this in favor of reference-type specific objects.
    CreateDataReferenceRequestBody:
      type: object
      required: [name, cloningInstructions]
      properties:
        name:
          $ref: "#/components/schemas/Name"
        referenceDescription:
          type: string
        resourceId:
          description: The ID of the resource
          type: string
          format: uuid
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        reference:
          $ref: '#/components/schemas/DataRepoSnapshot'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'

    DataReferenceRequestMetadata:
      type: object
      required: [name, cloningInstructions]
      description: Common information shared across all types of data reference requests.
      properties:
        name:
          $ref: "#/components/schemas/Name"
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        referenceDescription:
          type: string

    CreateDataRepoSnapshotReferenceRequestBody:
      type: object
      description: A request to create a reference to a Data Repo snapshot.
      required: [metadata, snapshot]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceRequestMetadata'
        snapshot:
          $ref: '#/components/schemas/DataRepoSnapshot'

    CreateGoogleBucketReferenceRequestBody:
      type: object
      description: A request to create a reference to a GCS bucket.
      required: [metadata, bucket]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceRequestMetadata'
        bucket:
          $ref: 'common/cloud_resources_uid.yaml#/components/schemas/GoogleBucketUid'

    CreateBigQueryDatasetReferenceRequestBody:
      type: object
      description: A request to create a reference to a BigQuery dataset.
      required: [metadata, dataset]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceRequestMetadata'
        dataset:
          $ref: 'common/cloud_resources_uid.yaml#/components/schemas/GoogleBigQueryDatasetUid'

    UpdateDataReferenceRequestBody:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/Name"
        referenceDescription:
          type: string

    # TODO(PF-404): remove this in favor of reference-type specific objects.
    DataReferenceDescription:
      type: object
      required: [referenceId, name, workspaceId, cloningInstructions]
      properties:
        referenceId:
          description: The ID of the data reference
          type: string
          format: uuid
        name:
          description: The name of the data reference; used to refer to the reference
          type: string
        referenceDescription:
          type: string
        workspaceId:
          description: The ID of the workspace containing the reference
          type: string
          format: uuid
        resourceDescription:
          $ref: '#/components/schemas/ResourceDescription'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        reference:
          $ref: '#/components/schemas/DataRepoSnapshot'
        credentialId:
          description: The ID of the credential to use when accessing the resource
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    ResourceDescription:
      description: Description of the workspace resource, if this is a controlled reference.
      type: object
      required: [resourceId, workspaceId, isVisible]
      properties:
        resourceId:
          description: The ID of the resource
          type: string
          format: uuid
        workspaceId:
          description: The ID of the workspace holding the resource
          type: string
          format: uuid
        applicationId:
          description: ID of application this resource is associated with, if any
          type: string
        isVisible:
          description: Whether this resource is visible or not
          type: boolean
        owner:
          description: ID of owner. null for shared resources
          type: string
        attributes:
          description: JSON map of user-provided attributes
          type: string

    DataReferenceMetadata:
      type: object
      required: [referenceId, name, workspaceId, cloningInstructions]
      description: Information common across all types of data references.
      properties:
        referenceId:
          description: The ID of the data reference
          type: string
          format: uuid
        name:
          description: The name of the data reference; used to refer to the reference
          type: string
        referenceDescription:
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        workspaceId:
          description: The ID of the workspace containing the reference
          type: string
          format: uuid

    DataRepoSnapshotReference:
      type: object
      description: A reference to a Data Repo snapshot.
      required: [metadata, snapshot]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceMetadata'
        snapshot:
          $ref: '#/components/schemas/DataRepoSnapshot'

    GoogleBucketReference:
      type: object
      description: A reference to a GCS bucket.
      required: [metadata, bucket]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceMetadata'
        bucket:
          $ref: 'common/cloud_resources_uid.yaml#/components/schemas/GoogleBucketUid'

    BigQueryDatasetReference:
      type: object
      description: A reference to a BigQuery dataset.
      required: [metadata, dataset]
      properties:
        metadata:
          $ref: '#/components/schemas/DataReferenceMetadata'
        dataset:
          $ref: 'common/cloud_resources_uid.yaml#/components/schemas/GoogleBigQueryDatasetUid'

    # TODO(PF-404): remove this in favor of reference-type specific objects.
    DataReferenceList:
      type: object
      required: [resources]
      properties:
        resources:
          description: A list of controlled and/or uncontrolled data references
          type: array
          items:
            $ref: '#/components/schemas/DataReferenceDescription'

    DataRepoSnapshot:
      description: A reference to a snapshot in Data Repo.
      type: object
      required: [instanceName, snapshot]
      properties:
        instanceName:
          description: The name of the Data Repo instance
          type: string
        snapshot:
          description: The ID of the Data Repo snapshot
          type: string

    WorkspaceStageModel:
      description: Enum for possible stages of a workspace along the Rawls migration path
      type: string
      enum: ['RAWLS_WORKSPACE', 'MC_WORKSPACE']

    IamRole:
      description: Enum containing all valid IAM roles on a Workspace
      type: string
      enum: ['READER', 'WRITER', 'OWNER']

    RoleBinding:
      description: A binding between an IAM role and users with that role
      type: object
      required: [role]
      properties:
        role:
          $ref: '#/components/schemas/IamRole'
        members:
          description: A list of users that this role applies to
          type: array
          items:
            type: string

    RoleBindingList:
      description: A list of role bindings
      type: array
      items:
        $ref: '#/components/schemas/RoleBinding'

    GrantRoleRequestBody:
      description: The body for a request to grant a role to a single user.
      type: object
      required: [memberEmail]
      properties:
        memberEmail:
          type: string

    CreateControlledGoogleBucketRequestBody:
      description: Payload for requesting a new controlled resource.
      type: object
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        googleBucket:
          $ref: '#/components/schemas/GoogleBucketCreationParameters'

    ControlledResourceCommonFields:
      type: object
      required: [ name, cloningInstructions, jobControl, accessScope ]
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
        name:
          $ref: "#/components/schemas/Name"
        description:
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        accessScope:
          type: string
          enum: [ 'SHARED', 'PRIVATE' ]
        managedBy:
          type: string
          enum: [ 'USER', 'APPLICATION' ]
        privateResourceUser:
          $ref: '#/components/schemas/PrivateResourceUser'

    PrivateResourceUser:
      description: A user and role pair for a user of a private resource.
      type: object
      properties:
        userName:
          description: Email address for the user of the resource
          type: string
        iamRole:
          $ref: '#/components/schemas/IamRole'

    CreatedControlledGoogleBucket:
      description: Response Payload for requesting a new controlled resource.
      type: object
      properties:
        resourceId:
          description: UUID of a newly-created resource. Null if not created yet.
          type: string
          format: uuid
        jobReport:
          $ref: '#/components/schemas/JobReport'
        googleBucket:
          $ref: '#/components/schemas/GoogleBucketCreationParameters'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'

    GoogleBucketCreationParameters:
      description: >-
        Bucket-specific properties to be set on creation. These are a subset of the
        values accepted by the Google Storage API.
      type: object
      properties:
        name:
          description: A valid bucket name per https://cloud.google.com/storage/docs/naming-buckets.
          type: string
        location:
          description: A valid bucket location per https://cloud.google.com/storage/docs/locations.
          type: string
        defaultStorageClass:
          $ref: '#/components/schemas/GoogleBucketDefaultStorageClass'
        lifecycle:
          $ref: '#/components/schemas/GoogleBucketLifecycle'

    GoogleBucketDefaultStorageClass:
      description: >-
        Type and availability of objects in a bucket, described at https://cloud.google.com/storage/docs/storage-classes.
        This list does not include legacy types that apply to some existing buckets. For those, see
        GoogleBucketLegacyStorageClass.
      type: string
      enum:
        - STANDARD
        - NEARLINE
        - COLDLINE
        - ARCHIVE
    GoogleBucketLifecycle:
      description: >-
        Options to control automatic deletion or storage class change for a bucket.
        Described at https://cloud.google.com/storage/docs/lifecycle.
      type: object
      properties:
        rules:
          description: List of rules for this bucket
          type: array
          items:
            $ref: '#/components/schemas/GoogleBucketLifecycleRule'

    GoogleBucketLifecycleRule:
      description: A lifecycle rule for a bucket.
      type: object
      properties:
        action:
          $ref: '#/components/schemas/GoogleBucketLifecycleRuleAction'
        condition:
          $ref: '#/components/schemas/GoogleBucketLifecycleRuleCondition'

    GoogleBucketLifecycleRuleAction:
      description: The lifecycle action to take. See https://cloud.google.com/storage/docs/lifecycle#actions.
      type: object
      properties:
        storageClass:
          $ref: '#/components/schemas/GoogleBucketDefaultStorageClass'
        type:
          $ref: '#/components/schemas/GoogleBucketLifecycleRuleActionType'

    GoogleBucketLifecycleRuleActionType:
      description: >-
        Type of action to perform. Formatted like our Java enums, but spelled in Camel case in Google API.
      type: string
      enum:
        - DELETE
        - SET_STORAGE_CLASS

    GoogleBucketLifecycleRuleCondition:
      description: The condition(s) under which the action will be taken.
      type: object
      properties:
        age:
          description: Age of an object (in days). This condition is satisfied when an object reaches the specified age.
          type: integer
        createdBefore:
          description: This condition is satisfied when an object is created before midnight of the specified date in UTC.
          type: string
          format: date
        customTimeBefore:
          description: >-
            This condition is satisfied when the customTime metadata for the object is set to an
            earlier date than the date used in this lifecycle condition.
          type: string
          format: date
        daysSinceCustomTime:
          description: >-
            Days since the date set in the customTime metadata for the object. This condition is
            satisfied when the current date and time is at least the specified number of days after
            the customTime.
          type: integer
        daysSinceNoncurrentTime:
          description: >-
            Relevant only for versioned objects. This condition is satisfied when an object has
            been noncurrent for more than the specified number of days.
          type: integer
        isLive:
          description: >-
            Relevant only for versioned objects. If the value is true, this condition matches the
            live version of objects; if the value is false, it matches noncurrent versions of objects.
          type: boolean
        matchesStorageClass:
          description: >-
            Objects having any of the storage classes specified by this condition will be matched. 
            Values include "STANDARD", "NEARLINE", "COLDLINE", "ARCHIVE", "MULTI_REGIONAL",
            "REGIONAL", and "DURABLE_REDUCED_AVAILABILITY".
          type: array
          items:
            $ref: '#/components/schemas/GoogleBucketDefaultStorageClass'
        noncurrentTimeBefore:
          description: >-
            Relevant only for versioned objects. This condition is satisfied for objects that became
            noncurrent on a date prior to the one specified in this condition.
          type: string
          format: date
        numNewerVersions:
          description: >-
            Relevant only for versioned objects. If the value is N, this condition is satisfied
            when there are at least N versions (including the live version) newer than this version
            of the object.
          type: integer
  responses:
    CreatedWorkspaceResponse:
      description: Response to createWorkspace calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWorkspace'

    DataReferenceResponse:
      description: Response to getDataReference calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceDescription'

    DataRepoSnapshotReferenceResponse:
      description: Response containing a reference to a Data Repo snapshot.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataRepoSnapshotReference'

    GoogleBucketReferenceResponse:
      description: Response containing a reference to a Google bucket.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GoogleBucketReference'

    BigQueryDatasetReferenceResponse:
      description: Response containing a reference to a BiqQuery dataset.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BigQueryDatasetReference'

    ReferenceListResponse:
      description: Response to list resource calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceList'

    RoleBindingListResponse:
      description: Response to list permissions calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoleBindingList'

    CreatedControlledGoogleBucketResponse:
      description: Response to Create controlled resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledGoogleBucket'

    CreateCloudContextResultResponse:
      description: Job is complete (succeeded or failed)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCloudContextResult'

    JobReportResponse:
      description: A response containing a JobReport object. Returned for running jobs.
      headers:
        Retry-After:
          description: >-
            optional - estimated seconds to wait before polling again. This allows
            a server to offer a hint as to when the job might be complete.
          schema:
            type: integer
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobReport'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    Conflict:
      description: Request conflicts with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization

security:
  - bearerAuth: []
  - authorization: [openid, email, profile]
