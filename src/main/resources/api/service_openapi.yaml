openapi: 3.0.3
info:
  title: Workspace Manager API
  description: Workspace Manager REST API to manage workspaces.
  version: 0.0.1

paths:
  # Unauthenticated Paths
  /status:
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        '200':
          description: Service is functional
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '500':
          description: Service is broken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
  /version:
    get:
      security: []
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [Unauthenticated]
      responses:
        '200':
          description: System version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersion'

  # Workspace paths
  /api/workspaces/v1:
    post:
      summary: Create a new Workspace. This should only be called by Folder Manager.
      operationId: createWorkspace
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedWorkspaceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/NotFound'

  /api/workspaces/v1/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: Get an existing Workspace.
      operationId: getWorkspace
      tags: [Workspace]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '500':
          description: Get request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
    delete:
      summary: Delete a Workspace. This should only be called by the Folder Manager.
      operationId: deleteWorkspace
      tags: [Workspace]
      requestBody:
        required: true
        description: Auth token of user requesting the delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWorkspaceRequestBody'
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/datareferences:
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      summary: Create a new data reference in a workspace.
      operationId: createDataReference
      tags: [Workspace]
      requestBody:
        required: true
        description: Stuff TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Enumerate the data references in a workspace.
      operationId: enumerateReferences
      tags: [Workspace]
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          $ref: '#/components/responses/ReferenceListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/datareferences/{referenceId}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/ReferenceId'
    get:
      summary: Gets a data reference from a workspace.
      operationId: getDataReference
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes a data reference from a workspace.
      operationId: deleteDataReference
      tags: [Workspace]
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{id}/datareferences/{referenceType}/{name}:
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/ReferenceType'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a data reference from a workspace by name and type.
      operationId: getDataReferenceByName
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/DataReferenceResponse'
        '500':
          $ref: '#/components/responses/ServerError'

  # Enumerate users
  /api/workspaces/v1/{id}/users:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/RoleFilter'
    get:
      summary: |
        Enumerate users in a workspace, optionally filtering by role.
      operationId: enumerateUsers
      tags: [Workspace]
      response:
        '200':
          $ref: '#/components/responses/EnumerateUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Add or list roles for a user
  /api/workspaces/v1/{id}/users/{user}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/User'
    post:
      summary: Grant a role to a user in a workspace
      operationId: addRole
      tags: [Workspace]
      requestBody:
        required: true
        description: The role to grant a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoleRequest'
      response:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Enumerate roles for a user or group in a workspace
      operationId: enumerateRoles
      tags: [Workspace]
      response:
        '200':
          $ref: '#/components/responses/EnumerateRolesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  # Delete a role for a user
  /api/workspaces/v1/{id}/users/{user}/{role}:
    parameters:
    - $ref: '#/components/parameters/Id'
    - $ref: '#/components/parameters/User'
    - $ref: '#/components/parameters/Role'
    delete:
      summary: Remove a role from a user or group in a workspace
      operationId: removeRole
      tags: [Workspace]
      response:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Job paths, all disabled for now
#  /api/jobs/v1/{id}:
#    parameters:
#      - $ref: '#/components/parameters/JobId'
#    get:
#      deprecated: true
#      summary: Poll the status of an existing async operation via job ID.
#      operationId: pollAsyncJob
#      tags: [Workspace]
#      responses:
#        '202':
#          description: Async job is incomplete
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/JobModel'
#        '200':
#          description: Async job is complete
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/JobModel'
#        '400':
#          $ref: '#/components/responses/BadRequest'
#        '403':
#          $ref: '#/components/responses/PermissionDenied'
#        '404':
#          $ref: '#/components/responses/NotFound'
#    delete: ## delete job data
#      deprecated: true
#      summary: Delete the job and data associated with it
#      operationId: deleteJob
#      tags: [Workspace]
#      responses:
#        '204':
#          description: Job was deleted
#  /api/jobs/v1/{id}/result:
#    parameters:
#      - $ref: '#/components/parameters/JobId'
#    get:
#      deprecated: true
#      summary: Retrieve the results of a completed async job specified by ID.
#      operationId: retrieveJobResult
#      tags: [Workspace]
#      responses:
#        default:
#          description: Successful responses return the type of object specified by the job; otherwise, ErrorModel
#          content:
#            application/json:
#              schema:
#                type: object

components:
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the workspace manager
      required: true
      schema:
        type: string
        format: uuid

    JobId:
      name: jobId
      in: path
      description: A String ID to used to identify a job
      required: true
      schema:
        type: string

    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        default: 0

    Limit:
      name: limit
      in: query
      description: The numbers of items to return. Default 10
      schema:
        type: integer
        default: 10

    ReferenceId:
      name: referenceId
      in: path
      description: A UUID used to identify a data reference in a workspace
      required: true
      schema:
        type: string
        format: uuid

    ReferenceType:
      name: referenceType
      in: path
      description: The type of a data reference in a workspace
      required: true
      schema:
        $ref: '#/components/schemas/ReferenceTypeEnum'

    Name:
      name: name
      in: path
      description: A name used to identify an object in the workspace manager
      required: true
      schema:
        $ref: '#/components/schemas/Name'

    User:
      name: user
      in: path
      description: A user or group with permissions in workspace manager
      required: true
      schema:
        $ref: '#/components/schemas/User'

    Role:
      name: role
      in: path
      description: A role that can be granted to a user or group in a workspace.
      required: true
      schema:
        $ref: '#/components/schemas/RoleEnum'

    RoleFilter:
      name: roleFilter
      in: query
      description: Parameter for filtering requests by role.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RoleEnum'

  schemas:
    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    JobControl:
      type: object
      required: [jobid]
      properties:
        jobid:
          type: string
        pubsub:
          type: object
          required: [projectid, topicid]
          properties:
            projectid:
              type: string
            topicid:
              type: string

    JobModel:
      type: object
      required: [id, status, status_code]
      properties:
        id:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [RUNNING, SUCCEEDED, FAILED]
        statusCode:
          description: HTTP code
          type: integer
        submitted:
          type: string
        completed:
          type: string
        estimatedRemainingTimeMS:
          type: integer

    SystemStatus:
      type: object
      required: [ok, systems]
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              critical:
                type: boolean
              messages:
                type: array
                items:
                  type: string
    Name:
      # Note: These format restrictions are enforced by WM, not natively by
      # Swagger.
      type: string
      pattern: '^[a-zA-Z0-9][_a-zA-Z0-9]{0,62}$'
      minLength: 1
      maxLength: 63

    User:
      # TODO: what format are  user/group names?
      type: string

    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'

    RoleEnum:
      type: string
      enum: [OWNER, RESOURCE_MANAGER, WRITER, READER, CLONER, RESOURCE_MANAGER_SHARE, WRITER_SHARE, READER_SHARE, CLONER_SHARE]

    SystemVersion:
      type: object
      required: [gitTag, gitHash, github, build]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

    CreateWorkspaceRequestBody:
      type: object
      required: [id, authToken]
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        authToken:
          description: Requesting user's auth token
          type: string
        spendProfile:
          description: UUID of provided spend profile
          type: string
          format: uuid
        policies:
          description: Policies provided by the containing folder
          type: array
          items:
            type: string
            format: uuid

    CreatedWorkspace:
      type: object
      required: [id]
      properties:
        id:
          description: UUID of a newly-created workspace
          type: string
          format: uuid

    DeleteWorkspaceRequestBody:
      type: object
      required: [authToken]
      properties:
        authToken:
          description: Requesting user's auth token
          type: string

    WorkspaceDescription:
      type: object
      required: [id]
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        spendProfile:
          description: UUID of provided spend profile
          type: string
          format: uuid

    CloningInstructionsEnum:
      type: string
      description: Instructions for copying this reference when cloning the workspace
      enum: ['COPY_NOTHING', 'COPY_DEFINITION', 'COPY_RESOURCE', 'COPY_REFERENCE']

    ReferenceTypeEnum:
      type: string
      description: The type of a reference, if an uncontrolled resource
      # TODO: swagger-codegen always looks for and removes a common prefix for
      # enum values, which breaks enums that only have a single value.
      # PLACEHOLDER_VALUE should be removed when we have an actual second value
      # to use.
      enum: ['DATA_REPO_SNAPSHOT', 'PLACEHOLDER_VALUE'] #eventually include GCS bucket, etc.

    CreateDataReferenceRequestBody:
      type: object
      required: [name, cloningInstructions]
      properties:
        name:
          $ref: "#/components/schemas/Name"
        resourceId:
          description: The ID of the resource
          type: string
          format: uuid
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        reference:
          $ref: '#/components/schemas/DataRepoSnapshot'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        credentialId:
          description: The IDs of the credentials to use with this resource
          type: string

    DataReferenceDescription:
      type: object
      required: [referenceId, name, workspaceId, cloningInstructions]
      properties:
        referenceId:
          description: The ID of the data reference
          type: string
          format: uuid
        name:
          description: The name of the data reference; used to refer to the reference
          type: string
        workspaceId:
          description: The ID of the workspace containing the reference
          type: string
          format: uuid
        resourceDescription:
          $ref: '#/components/schemas/ResourceDescription'
        referenceType:
          $ref: '#/components/schemas/ReferenceTypeEnum'
        reference:
          $ref: '#/components/schemas/DataRepoSnapshot'
        credentialId:
          description: The ID of the credential to use when accessing the resource
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    ResourceDescription:
      description: Description of the workspace resource, if this is a controlled reference.
      type: object
      required: [resourceId, workspaceId, isVisible]
      properties:
        resourceId:
          description: The ID of the resource
          type: string
          format: uuid
        workspaceId:
          description: The ID of the workspace holding the resource
          type: string
          format: uuid
        applicationId:
          description: ID of application this resource is associated with, if any
          type: string
        isVisible:
          description: Whether this resource is visible or not
          type: boolean
        owner:
          description: ID of owner. null for shared resources
          type: string
        attributes:
          description: JSON map of user-provided attributes
          type: string

    DataReferenceList:
      type: object
      required: [resources]
      properties:
        resources:
          description: A list of controlled and/or uncontrolled data references
          type: array
          items:
            $ref: '#/components/schemas/DataReferenceDescription'

    DataRepoSnapshot:
      description: Currently, the only supported uncontrolled reference type.
      type: object
      required: [instanceName, snapshot]
      properties:
        instanceName:
          description: The name of the Data Repo instance
          type: string
        snapshot:
          description: The ID of the Data Repo snapshot
          type: string

    AddRoleRequest:
      description: Request body for adding a role to a user
      type: object
      properties:
        role:
          $ref: '#/components/schemas/RoleEnum'

  responses:
    CreatedWorkspaceResponse:
      description: Response to createWorkspace calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWorkspace'

    DataReferenceResponse:
      description: Response to getDataReference calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceDescription'

    ReferenceListResponse:
      description: Response to list resource calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceList'

    EnumerateUsersResponse:
      description: Response to enumerate user calls
      content:
        application/json:
          schema:
            # TODO: This lumps all roles together. Rethink this?
            $ref: '#/components/schemas/UserList'

    # Error Responses
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization

security:
  - bearerAuth: []
  - authorization: [openid, email, profile]
