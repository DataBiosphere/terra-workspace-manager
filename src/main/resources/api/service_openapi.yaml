openapi: 3.0.0
info:
  title: Workspace Manager API
  description: |
    Workspace Manager REST API to manage workspaces.
  version: 0.0.1

servers:
- url: http://localhost:8080

paths:
  '/status':
    get:
      description: |
        Returns the operational status of the service
      operationId: serviceStatus
      tags:
      - unauthenticated
      responses:
        200:
          description: Service is functional
          $ref: '#/components/responses/StatusResponse'
        500:
          description: Service is broken
          $ref: '#/components/responses/StatusResponse'

  '/api/v1/workspaces':
    post:
      description: |
        Create a new Workspace. This should only be called by Folder Manager.
      operationId: createWorkspace
      tags:
      - workspace
      requestBody:
        description: |
          Auth token, spend profile, and policy information from
          Folder Manager, as well as async job information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequestBody'
      responses:
        200:
          description: Ok
          $ref: '#/components/responses/CreateResponse'
        400:
          description: Bad request - invalid id, badly formed
          $ref: '#/components/responses/ErrorResponse'
        403:
          description: Permission denied
          $ref: '#/components/responses/ErrorResponse'
        500:
          description: Creation request error
          $ref: '#/components/responses/ErrorResponse'
  '/api/v1/workspaces/{id}':
    parameters:
    - $ref: '#/components/parameters/Id'
    get:
      description: |
        Get an existing Workspace.
      operationId: getWorkspace
      tags:
        - workspace
      responses:
        200:
          description: OK
          $ref: '#/components/responses/GetResponse'
        500:
          description: Get request error
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Delete a Workspace. This should only be called by the Folder Manager.
      operationId: deleteWorkspace
      tags:
      - workspace
      requestBody:
        description: |
          Auth token of user requesting the delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWorkspaceRequestBody'
      responses:
        204:
          description: Success
        400:
          description: Bad Request
          $ref: '#/components/responses/ErrorResponse'
        401:
          description: Unauthorized or not found
          $ref: '#/components/responses/ErrorResponse'
        500:
          description: Server Error
          $ref: '#/components/responses/ErrorResponse'
  '/api/v1/workspaces/{id}/datareferences':
    parameters:
      - $ref: '#/components/parameters/Id'
    post:
      description: |
        Create a new data reference in a workspace.
      operationId: createDataReference
      tags:
        - workspace
      requestBody:
        description: |
          Stuff TBD
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataReferenceRequestBody'
      responses:
        200:
          description: OK
          $ref: '#/components/responses/DataReferenceResponse'
        400:
          description: Bad request
          $ref: '#/components/responses/ErrorResponse'
        403:
          description: Permission denied
          $ref: '#/components/responses/ErrorResponse'
        500:
          description: Creation request error
          $ref: '#/components/responses/ErrorResponse'
    get:
      description: |
        Enumerate the data references in a workspace.
      operationId: enumerateReferences
      tags:
      - workspace
      parameters:
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: OK
          $ref: '#/components/responses/ReferenceListResponse'
        400:
          description: Error in request
          $ref: '#/components/responses/ErrorResponse'
        401:
          description: Unauthorized access
          $ref: '#/components/responses/ErrorResponse'
        500:
          description: Server Error
          $ref: '#/components/responses/ErrorResponse'
  '/api/v1/workspaces/{id}/datareferences/{referenceId}':
    parameters:
      - $ref: '#/components/parameters/Id'
      - $ref: '#/components/parameters/ReferenceId'
    get:
      description: |
        Gets a data reference from a workspace.
      operationId: getDataReference
      tags:
        - workspace
      responses:
        200:
          description: OK
          $ref: '#/components/responses/DataReferenceResponse'
        500:
          description: Creation request error
          $ref: '#/components/responses/ErrorResponse'
    delete:
      description: |
        Deletes a data reference from a workspace.
      operationId: deleteDataReference
      tags:
        - workspace
      responses:
        204:
          description: No Content
        403:
          description: No permission to delete
          $ref: '#/components/responses/ErrorResponse'
        500:
          description: Delete request error
          $ref: '#/components/responses/ErrorResponse'

  '/api/v1/jobs/{id}':
    parameters:
    - $ref: '#/components/parameters/Id'
    get:
      description: |
        Poll the status of an existing async operation via job ID.
      operationId: pollAsyncJob
      tags:
      - workspace
      responses:
        202:
          description: Async job is incomplete
          $ref: '#/components/responses/JobModelResponse'
        200:
          description: Async job is complete
          $ref: '#/components/responses/JobModelResponse'
        400:
          description: Bad request - invalid id, badly formed
          $ref: '#/components/responses/ErrorResponse'
        403:
          description: No permission to see job
          $ref: '#/components/responses/ErrorResponse'
        404:
          description: Not found - job id does not exist
          $ref: '#/components/responses/ErrorResponse'
    delete:  ## delete job data
      description: Delete the job and data associated with it
      operationId: deleteJob
      tags:
      - workspace
      responses:
        204:
          description: Job was deleted
  '/api/v1/jobs/{id}/result':
    parameters:
    - $ref: '#/components/parameters/Id'
    get:
      description: |
        Retrieve the results of a completed async job specified by ID.
      operationId: retrieveJobResult
      tags:
      - workspace
      responses:
        default:
          description: Successful responses return the type of object specified by the job; otherwise, ErrorModel
          content:
            application/json:
              schema:
                type: object
components:
  parameters:
    Id:
      name: id
      in: path
      description: A UUID to used to identify an object in the workspace manager
      required: true
      schema:
        type: string
    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        default: 0
    Limit:
      name: limit
      in: query
      description: The numbers of items to return. Default 10
      schema:
        type: integer
        default: 10
    ReferenceId:
        name: referenceId
        in: path
        description: A UUID used to identify a data reference in a workspace
        required: true
        schema:
          type: string
  schemas:
    ErrorReport:
      type: object
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string
    JobControl:
      type: object
      required:
      - jobid
      properties:
        jobid:
          type: string
        pubsub:
          type: object
          required:
          - projectid
          - topicid
          properties:
            projectid:
              type: string
            topicid:
              type: string
    JobModel:
      type: object
      required:
      - id
      - status
      - status_code
      properties:
        id:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
          - RUNNING
          - SUCCEEDED
          - FAILED
        statusCode:
          description: HTTP code
          type: integer
        submitted:
          type: string
        completed:
          type: string
        estimatedRemainingTimeMS:
          type: integer
    SystemStatus:
      type: object
      properties:
        ok:
          type: boolean
          description: status of this service
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string
    CreateWorkspaceRequestBody:
      type: object
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        authToken:
          description: Requesting user's auth token
          type: string
        spendProfile:
          description: UUID of provided spend profile
          type: string
          nullable: true
          format: uuid
        policies:
          description: Policies provided by the containing folder
          type: array
          nullable: true
          items:
            type: string
            format: uuid
    CreatedWorkspace:
      type: object
      properties:
        id:
          type: string
          description: UUID of a newly-created workspace
    DeleteWorkspaceRequestBody:
      type: object
      properties:
        authToken:
          description: Requesting user's auth token
          type: string
    WorkspaceDescription:
      type: object
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        spendProfile:
          description: UUID of provided spend profile
          type: string
          nullable: true
          format: uuid
    CreateDataReferenceRequestBody:
      type: object
      properties:
        name:
          description: The name of the data reference
          type: string
        resourceId:
          description: The ID of the resource
          type: string
          format: uuid
          nullable: true
        referenceType:
          description: The type of the data reference (i.e. TDR snapshot, AWS bucket, etc)
          type: string
          nullable: true
        reference:
          description: The reference to the data (i.e. gs://...) #todo- describe as json instead
          type: object
          nullable: true
        cloningInstructions:
          description: The cloning instructions for the reference
          type: string
        credentialId:
          description: The IDs of the credentials to use with this resource
          type: string
          nullable: true
    DataReferenceDescription:
      type: object
      properties:
        referenceId:
          description: The ID of the data reference
          type: string
          format: uuid
        name:
          description: The name of the data reference; used to refer to the reference
          type: string
        workspaceId:
          description: The ID of the workspace containing the reference
          type: string
          format: uuid
        resourceDescription:
          description: Description of the workspace resource, if this is a controlled reference.
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ResourceDescription'
        referenceType:
          description: The type of the reference, if an uncontrolled resource
          type: string
          enum: ["DataRepoSnapshot"] #eventually include GCS bucket, etc.
          nullable: true
        reference:
          # Once https://github.com/OpenAPITools/openapi-generator/issues/5381
          # is resolved, we can use a oneOf field to validate different
          # reference schemas. Until then, I don't have a better solution
          # than accepting a JSON string and validating in the service instead.
          description: The description of the reference, if an uncontrolled resource
          type: string
          format: json
          nullable: true
        credentialId:
          description: The ID of the credential to use when accessing the resource
          type: string
          nullable: true
        cloningInstructions:
          description: Instructions for copying this reference when cloning the workspace
          type: string
          enum: ["COPY_NOTHING", "COPY_DEFINITION", "COPY_RESOURCE", "COPY_REFERENCE"]
    ResourceDescription:
      type: object
      properties:
        resource_id:
          description: The ID of the resource
          type: string
          format: uuid
        workspace_id:
          description: The ID of the workspace holding the resource
          type: string
          format: uuid
        application_id:
          description: ID of application this resource is associated with, if any
          type: string
          nullable: true
        is_visible:
          description: Whether this resource is visible or not
          type: boolean
        owner:
          description: ID of owner. null for shared resources
          type: string
          nullable: true
        attributes:
          description: JSON map of user-provided attributes
          type: string
          nullable: true
    DataReferenceList:
      type: object
      properties:
        resources:
          description: A list of controlled and/or uncontrolled data references
          type: array
          items:
            $ref: '#/components/schemas/DataReferenceDescription'
    DataRepoSnapshot:
      type: object
      properties:
        instance:
          description: The location (DNS address) of the Data Repo instance
          type: string
        snapshot:
            description: The ID of the Data Repo snapshot
            type: string

  responses:
    ErrorResponse:
      description: common error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    StatusResponse:
      description: common status response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'

    CreateResponse:
      description: Response to Create calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWorkspace'

    GetResponse:
      description: Response to Get calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WorkspaceDescription'

    DataReferenceResponse:
      description: Response to getDataReference calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceDescription'

    JobModelResponse:
      description: Response with a JobModel
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobModel'

    ReferenceListResponse:
      description: Response to list resource calls
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataReferenceList'
