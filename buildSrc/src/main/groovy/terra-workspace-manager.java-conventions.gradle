// Java conventions common for all of the code
plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless'
    id 'com.github.spotbugs'
}

version = gradle.wsmVersion
group = 'bio.terra'

// If true, search local repository (~/.m2/repository/) first for dependencies.
def useMavenLocal = false
repositories {
    if (useMavenLocal) {
        mavenLocal()
    }
    maven {
        // Terra proxy for maven central
        url "https://broadinstitute.jfrog.io/broadinstitute/maven-central/"
    }
    mavenCentral()
    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-release/"
    }
    maven {
        url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/"
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

// for scans
if (hasProperty("buildScan")) {
    buildScan {
        termsOfServiceUrl = "https://gradle.com/terms-of-service"
        termsOfServiceAgree = "yes"
    }
}

dependencyLocking {
    lockAllConfigurations()
    lockMode = LockMode.STRICT
}

// Spotless configuration
spotless {
    groovyGradle {
        target "${rootDir}/**/*.gradle"
        indentWithSpaces()
    }
    java {
        googleJavaFormat()
        removeUnusedImports()
        targetExclude("${buildDir}/**", "**/generated/**")
    }
}
build.dependsOn spotlessApply

// Spotbugs configuration
spotbugs {
    effort = 'max'
    excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
}
spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main.html")
            stylesheet = 'fancy.xsl'
        }
    }
}
spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test.html")
            stylesheet = 'fancy.xsl'
        }
    }
}

// The default jacocoTestReport step cannot handle inputs from multiple gradle
// tasks. Instead, we define our own task to generate a combined report from the
// output of all tasks (unitTest, connectedTest, azureTest, and even bootRun for
// integration tests) we've run.
task combinedJaCoCoReport(type: JacocoReport) {
    executionData fileTree("$buildDir/jacoco").include("*.exec")
    classDirectories.setFrom(files(project.sourceSets.main.output))
    sourceDirectories.setFrom(files(project.sourceSets.main.allSource.srcDirs))

    reports {
        xml.required = true
        xml.outputLocation.fileValue(file("$buildDir/reports/jacoco/test/jacoco.xml"))
    }

    // Ignore coverage of generated code.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'bio/terra/workspace/generated/**')
        }))
    }
}
