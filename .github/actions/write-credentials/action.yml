name: 'write-credentials'
description: |
  Collect the needed credentials for testing and place them in the
  appropriate config directory. Note that all of these secrets are
  assumed to be base64-encoded JSON service account keys.
inputs:
  user-delegated-sa-b64:
    description: 'Base64-encoded user delegated service account'
    required: true
  buffer-client-sa-b64:
    description: 'Base64-encoded Buffer client service account'
    required: true
  testrunner-sa-b64:
    description: 'Base64-encoded Testrunner service account'
    required: true
  testrunner-k8s-sa-b64:
    description: 'Base64-encoded Testrunner k8s service account'
    required: true
  janitor-sa-b64:
    description: 'Base64-encoded CRL Janitor service account'
    required: true
  wsm-sa-b64:
    description: 'Base64-encoded WSM service account'
    required: true
  policy-client-sa-b64:
    description: "Base64-encoded policy client service account"
    required: true

runs:
  using: "composite"
  steps:

    - name: Write credentials
      id: 'setup-user-delegated-creds'
      run: |
        mkdir -p config
        USER_DELEGATED_SA_B64=${{ inputs.user-delegated-sa-b64 }}
        echo ::add-mask::$USER_DELEGATED_SA_B64
        USER_DELEGATED_SA=$(echo $USER_DELEGATED_SA_B64 | base64 --decode)
        echo ::add-mask::$USER_DELEGATED_SA
        echo $USER_DELEGATED_SA > config/user-delegated-sa.json
        
        BUFFER_CLIENT_SA_B64=${{ inputs.buffer-client-sa-b64 }}
        echo ::add-mask::$BUFFER_CLIENT_SA_B64
        BUFFER_CLIENT_SA=$(echo $BUFFER_CLIENT_SA_B64 | base64 --decode)
        echo ::add-mask::$BUFFER_CLIENT_SA
        echo $BUFFER_CLIENT_SA > config/buffer-client-sa.json
        
        TESTRUNNER_SA_B64=${{ inputs.testrunner-sa-b64 }}
        echo ::add-mask::$TESTRUNNER_SA_B64
        TESTRUNNER_SA=$(echo $TESTRUNNER_SA_B64 | base64 --decode)
        echo ::add-mask::$TESTRUNNER_SA
        echo $TESTRUNNER_SA > config/testrunner-sa.json
        
        TESTRUNNER_K8S_SA_B64=${{ inputs.testrunner-k8s-sa-b64 }}
        echo ::add-mask::$TESTRUNNER_K8S_SA_B64
        TESTRUNNER_K8S_SA=$(echo $TESTRUNNER_K8S_SA_B64 | base64 --decode)
        echo ::add-mask::$TESTRUNNER_K8S_SA
        echo $TESTRUNNER_K8S_SA | jq -r ".data[\"ca.crt\"]" > config/testrunner-k8s-sa-key.txt
        echo $TESTRUNNER_K8S_SA | jq -r .data.token | base64 --decode > config/testrunner-k8s-sa-token.txt
        
        JANITOR_SA_B64=${{ inputs.janitor-sa-b64 }}
        echo ::add-mask::$JANITOR_SA_B64
        JANITOR_SA=$(echo $JANITOR_SA_B64 | base64 --decode)
        echo ::add-mask::$JANITOR_SA
        echo $JANITOR_SA > config/janitor-client-sa.json

        POLICY_CLIENT_SA_B64=${{ inputs.policy-client-sa-b64 }}
        echo ::add-mask::$POLICY_CLIENT_SA_B64
        POLICY_CLIENT_SA=$(echo $POLICY_CLIENT_SA_B64 | base64 --decode)
        echo ::add-mask::$POLICY_CLIENT_SA
        echo $POLICY_CLIENT_SA > config/policy-client-sa.json

        WSM_SA_B64=${{ inputs.wsm-sa-b64 }}
        echo ::add-mask::$WSM_SA_B64
        WSM_SA=$(echo $WSM_SA_B64 | base64 --decode)
        echo ::add-mask::$WSM_SA
        echo $WSM_SA > config/wsm-sa.json
      shell: bash
