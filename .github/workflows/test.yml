# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Run Tests

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:
    inputs:
      testEnv:
        description: 'Environment in which tests should be run. Currently works on dev, alpha and staging'
        required: true

jobs:
  test:

    runs-on: ubuntu-latest

    # A note on our use of a matrix here:
    # Github workflows don't really support reusing code very well. Every workflow runs on a clean
    # instance, so we can't share a setup workflow. We could write a custom action, but you can't
    # call an action from another action, and they also don't have access to secrets.
    # Github also doesn't support yaml anchors (https://github.community/t/support-for-yaml-anchors/),
    # so we're using a matrix.
    strategy:
      fail-fast: false
      matrix:
        gradleTask: [unitTest, connectedTest, integrationTest]

    services:
      postgres:
        image: postgres:13.1
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v2

    - name: Set env and whether or not to use a local server
      id: set-env-step
      run: |
        if ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}; then
          ENV=local
          CONFIG_ENV=dev
          LOCAL_SERVER=${{ matrix.gradleTask == 'integrationTest' }}
        elif ${{ github.event_name == 'workflow_dispatch' }}; then
          ENV=${{ github.event.inputs.testEnv }}
          CONFIG_ENV=${{ github.event.inputs.testEnv }}
          LOCAL_SERVER=false
        else
          echo ::error ::${{ github.event_name }} not supported for this workflow
          exit 1
        fi
        echo ::set-output name=test-env::$ENV
        echo ::set-output name=config-env::$CONFIG_ENV
        echo ::set-output name=local-server::$LOCAL_SERVER

    - name: Initialize Postgres DB
      env:
        PGPASSWORD: postgres
      run: psql -h 127.0.0.1 -U postgres -f ./local-dev/local-postgres-init.sql

    - name: Set up AdoptOpenJDK 11
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
        restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # These steps aren't needed for unit tests
    - name: Get Vault token
      if: matrix.gradleTask != 'unitTest'
      id: vault-token-step
      env:
        VAULT_ADDR: https://clotho.broadinstitute.org:8200
      run: |
        VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_ADDR=${VAULT_ADDR}" \
          vault:1.1.0 \
          vault write -field token \
            auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
            secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
        echo ::set-output name=vault-token::$VAULT_TOKEN
        echo ::add-mask::$VAULT_TOKEN

    - name: Set permissions and render test configurations
      if: matrix.gradleTask != 'unitTest'
      run: |
        chmod +x render_config.sh
        ./render_config.sh ${{ steps.set-env-step.outputs.config-env }} ${{ steps.vault-token-step.outputs.vault-token }}
        chmod +r rendered

      # Only integration tests need a running server
    - name: Run local server (in background)
      if: steps.set-env-step.outputs.local-server == 'true'
      run: ./gradlew bootRun &

    - name: Wait for local server to start
      if: steps.set-env-step.outputs.local-server == 'true'
      # With a timeout of 60 seconds, try to connect to localhost:8080 every 1 second.
      run: timeout 60 bash -c 'until echo > /dev/tcp/localhost/8080; do sleep 1; done'

      # Run tests
    - name: Run tests
      env:
        TEST_ENV: ${{ steps.set-env-step.outputs.test-env }}
      run: ./gradlew ${{ matrix.gradleTask }} --scan

    - name: Codacy Coverage Reporter
      if: matrix.gradleTask == 'unitTest'
      uses: codacy/codacy-coverage-reporter-action@0.2.0
      continue-on-error: true
      env:
        CODACY_API_BASE_URL: https://app.codacy.com/gh/DataBiosphere/terra-workspace-manager
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: build/reports/jacoco/test/jacoco.xml

    - name: Upload Test Reports
      if: ${{ always() }}
      uses: actions/upload-artifact@v1
      with:
        name: Test Reports
        path: build/reports/tests

    - name: "Notify QA Slack"
      if: steps.set-env-step.outputs.test-env == 'alpha' || steps.set-env-step.outputs.test-env == 'staging'
      uses: broadinstitute/action-slack@v3.8.0
      # see https://github.com/broadinstitute/action-slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      with:
        status: ${{ job.status }}
        channel: "#dsde-qa"
        username: "Workspace Manager ${{ steps.set-env-step.outputs.test-env }} tests"
        author_name: "Workspace Manager ${{ steps.set-env-step.outputs.test-env }} ${{ matrix.gradleTask }}"
        fields: repo,job,workflow,commit,eventName,author,took
