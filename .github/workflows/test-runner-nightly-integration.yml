# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Test Runner Nightly Tests

on:
  workflow_dispatch: {}
#  schedule:
#    - cron: '0 7 * * *' # run at 7 AM UTC, 2 AM ET.

jobs:
  test-runner-integration:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up AdoptOpenJDK 11
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      # This step caches Gradle packages for reuse in the same VM instance.
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Get Vault token
        id: vault-token-step
        env:
          VAULT_ADDR: https://clotho.broadinstitute.org:8200
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::set-output name=vault-token::$VAULT_TOKEN
          echo ::add-mask::$VAULT_TOKEN
      # We can also set the env var in the GH action script to specify which server we are testing against.
      # This will be particularly helpful once we switch over to testing against any test env -- then it's just a change to the env var.
      # Please refer to https://github.com/DataBiosphere/terra-test-runner#override-the-server-from-the-command-line for more information.
      - name: Run the integration test suite
        id: integration-test
        if: ${{ always }}
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
# TODO: run the whole test
#          test: suites/FullIntegration.json
          test: configs/integration/BasicUnauthenticated.json
          vault-token: ${{ steps.vault-token-step.outputs.vault-token }}
      - name: Run the perf test suite
        id: perf-test
        if: ${{ always }}
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/BasicPerf.json
          vault-token: ${{ steps.vault-token-step.outputs.vault-token }}
      - name: Run the resiliency test suite
        id: resiliency-test
        if: ${{ always }}
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/BasicResiliency.json
          vault-token: ${{ steps.vault-token-step.outputs.vault-token }}
      - name: Test results
        run: |
          echo "Integration test result: ${{ steps.integration-test }}"
          echo "Perf test result: ${{ steps.perf-test }}"
          echo "Resilience test result: ${{ steps.resiliency-test }}"
          exit $((${{ steps.integration-test }} + ${{ steps.perf-test }} + ${{ steps.resiliency-test }}))
