# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Run Integration Tests

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - 'local-dev/**'
jobs:
  integration-test:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      # See dev_push.yml
      - name: Get Vault token
        id: vault-token-step
        env:
          VAULT_ADDR: https://clotho.broadinstitute.org:8200
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::set-output name=vault-token::$VAULT_TOKEN
          echo ::add-mask::$VAULT_TOKEN
      - name: Set up AdoptOpenJDK 11
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
      - name: Grant execute permission for render_config
        run: chmod +x render_config.sh
      - name: Render configuration for tests
        run: ./render_config.sh ${{ steps.vault-token-step.outputs.vault-token }} dev
      - name: Ensure read permissions for rendered files
        run: sudo chmod +r rendered
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Initialize Postgres DB
        env:
          PGPASSWORD: postgres
        run: psql -h 127.0.0.1 -U postgres -f ./local-dev/local-postgres-init.sql
      - name: Run local server (in background)
        run: ./gradlew bootRun &
      - name: Wait for local server to start
        run: timeout 60 bash -c 'until echo > /dev/tcp/localhost/8080; do sleep 0.5; done'
      - name: Run integration tests
        env:
          TEST_ENV: dev
        run: ./gradlew integrationTest --scan
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test Reports
          path: build/reports/tests
