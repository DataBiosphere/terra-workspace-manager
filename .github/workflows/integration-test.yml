# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Run Integration Tests via Preview Environment

on:
  push:
    paths-ignore:
      - 'README.md'
      # TODO: temporarily disabling this so it runs for this PR.
#      - '.github/**'
      - 'local-dev/**'
env:
  ENV_PREFIX: wsm
  HELM_CHART_NAME: workspacemanager
  VAULT_ADDR: https://clotho.broadinstitute.org:8200
jobs:
  integration-test:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      # See dev_push.yml
      - name: Get truncated branch name
        id: get-branch
        # Truncate name to 16 chars due to usage in dns name later
        # TODO: reverting trunaction to fix malformed state
        #          fullname=$(echo ${GITHUB_REF#refs/heads/})
        #          echo ::set-output name=branch::${fullname:0:16}
        run: |
          echo ::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})
      - name: Get short SHA
        id: slug
        run: |
          sha7=$(curl \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ steps.get-branch.outputs.branch }} \
          -u "broadbot:${{ secrets.GITHUB_TOKEN }}" | jq -r '.head.sha' | cut -c1-7)
          echo "Short SHA: $sha7"
          echo ::set-output name=sha7::$sha7
      - name: Construct default version JSON
        id: versions-default
        run: echo ::set-output name=versions::{\"releases\":{\"${HELM_CHART_NAME}\":{\"appVersion\":\"pr${{ steps.get-branch.outputs.branch }}-${{ steps.slug.outputs.sha7 }}\"}}}
      - name: Construct version override JSON
        id: versions-override
        run: |
          comment='${{ github.event.comment.body }}'
          override=${comment#'preview-test'}
          if [[ $override == '' ]]; then override='{}'; fi
          echo "override: $override"
          echo ::set-output name=versions::$override
      - name: Construct merged version JSON
        id: versions-merge
        run: |
          echo '${{ steps.versions-default.outputs.versions }}' > default.json
          echo '${{ steps.versions-override.outputs.versions }}' > override.json
          merge=$(jq -sc '.[0] * .[1]' default.json override.json)
          echo "merge: $merge"
          merge_b64=$(echo $merge | base64 -w 0)
          echo ::set-output name=versions::$merge_b64
      - name: Get Vault token
        id: vault-token-step
        env:
          VAULT_ADDR: https://clotho.broadinstitute.org:8200
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::set-output name=vault-token::$VAULT_TOKEN
          echo ::add-mask::$VAULT_TOKEN
      - name: Create
        id: create
        uses: docker://us-central1-docker.pkg.dev/dsp-artifact-registry/github-actions-public/preview:latest
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          VAULT_TOKEN: ${{ steps.vault-token-step.outputs.vault-token }}
          VAULT_SA_PATH: ${{ secrets.CI_SA_VAULT_PATH }}
          # TODO: deleting malformed workspace
          PREVIEW_CMD: delete
          ENV_ID: wsm${{ steps.get-branch.outputs.branch }}
          VERSIONS_B64: '${{ steps.versions-merge.outputs.versions }}'
      - name: Set up AdoptOpenJDK 11
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
      - name: Grant execute permission for render_config
        run: chmod +x render_config.sh
      - name: Render configuration for tests
        run: ./render_config.sh ${{ steps.vault-token-step.outputs.vault-token }} dev
      - name: Ensure read permissions for rendered files
        run: sudo chmod +r rendered
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Initialize Postgres DB
        env:
          PGPASSWORD: postgres
        run: psql -h 127.0.0.1 -U postgres -f ./local-dev/local-postgres-init.sql
      - name: Get preview WM url
        id: get-wm-url
        run: |
          WM_URL=$(echo ${{ steps.create.outputs.output }} | base64 -d | jq -r '.services.workspacemanager.url')/
          echo ::set-output name=wm-url::$WM_URL
      - name: Run Tests
        id: test
        env:
          PREVIEW_WM_URL: ${{ steps.get-wm-url.outputs.wm-url }}
          TEST_ENV: "preview"
        run: |
          ./gradlew integrationTest --scan
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Test Reports
          path: build/reports/tests