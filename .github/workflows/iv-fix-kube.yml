# This workflow runs the WSM resilience suites with TestRunner 0.1.7-SNAPSHOT

name: TestRunner Upgrade Tests

on:
  push

jobs:
  iv-fix-kube:

    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v2

      # Sparse check out terra-helmfile repo version directories
      - uses: ./.github/actions/checkout-helm-versions
        with:
          repository: broadinstitute/terra-helmfile
          ref: master
          token: ${{ secrets.BROADBOT_TOKEN }}
          path: integration/terra-helmfile

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'dsp-tools-iap-access@dsp-tools-k8s.iam.gserviceaccount.com'
          # Create `steps.auth.outputs.id_token` that can access Identity Aware Proxy
          token_format: 'id_token'
          id_token_audience: '${{ secrets.IAP_ID_TOKEN_AUDIENCE }}'
          id_token_include_email: true

      # Install postgres:
      # - Create the file repository configuration.
      # - Import the repository signing key.
      # - Update the package lists.
      # - Install the latest version of PostgreSQL. If you want a specific version, use 'postgresql-12' or similar instead of 'postgresql':
      - name: Install the latest postgres
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo sh -c 'curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - '
          sudo apt-get update
          sudo apt-get -y install postgresql

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get Vault token
        id: vault-token-step
        env:
          VAULT_ADDR: https://clotho.broadinstitute.org:8200
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::add-mask::$VAULT_TOKEN
          echo ::set-output name=vault-token::$VAULT_TOKEN

      - name: Write config
        id: config
        uses: ./.github/actions/write-config
        with:
          vault-token: ${{ steps.vault-token-step.outputs.vault-token }}
          target: wsmtest

      # The ArgoCD sync triggers the synchronization of the wsmtest cluster. The ArgoCD CLI
      # will wait for the initial sync to complete, but it won't necessarily wait for WSM's
      # new version to actually come fully online--which could take minutes or hours in rare
      # cases. We sleep for two minutes to try to allow WSM to come online.
      # The sync is bracketed by /version probes so we have the pre and post sync versions
      # in the log.
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x ./argocd
      - name: ArgoCD sync
        run: |
          version=$(curl https://workspace.wsmtest.integ.envs.broadinstitute.org/version)
          echo "$(date "+%Y-%m-%dT%H:%M:%S") pre-sync wsmtest version: $version"
          ./argocd --grpc-web --server ap-argocd.dsp-devops.broadinstitute.org:443 \
            --auth-token '${{ secrets.WSMTEST_SYNC_ARGOCD_TOKEN }}' \
            --header 'Proxy-Authorization: Bearer ${{ steps.auth.outputs.id_token }}' \
            app sync workspacemanager-wsmtest
          sleep 120
          version=$(curl https://workspace.wsmtest.integ.envs.broadinstitute.org/version)
          echo "$(date "+%Y-%m-%dT%H:%M:%S") post-sync wsmtest version: $version"
      - name: Remove ArgoCD CLI
        if: always()
        run: |
          rm -f ./argocd

      - name: clean databases before resiliency suite
        if: always()
        uses: ./.github/actions/clean-databases

      - name: Run the resiliency test suite
        id: resiliency-test
        if: always()
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/BasicResiliency.json

