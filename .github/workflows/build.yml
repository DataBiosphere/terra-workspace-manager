name: Tag, Build, and Push Image

on:
  push:
    branches:
    - dev
    paths-ignore:
    - 'README.md'
    - '.github/**'
    - 'local-dev/**'
  pull_request:
    branches:
    - dev
    paths-ignore:
    - 'README.md'
    - 'local-dev/**'
env:
  SERVICE_NAME: ${{ github.event.repository.name }}
  GOOGLE_PROJECT: terra-kernel-k8s
  GKE_CLUSTER: terra-kernel-k8s
  VAULT_PATH_GCR: secret/dsde/terra/kernel/test
  VAULT_ADDR: https://clotho.broadinstitute.org:8200
jobs:
  tag-build-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current code
      uses: actions/checkout@v2
    - name: Bump version and push tag
      id: tag
      uses: broadinstitute/github-tag-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
        RELEASE_BRANCHES: dev
    - name: Pull Vault image
      run: docker pull vault:1.1.0
    # Currently, there's no way to add capabilities to Docker actions on Git, and Vault needs IPC_LOCK to run.
    - name: Get Vault token
      id: vault-token-step
      run: |
        VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_ADDR=${VAULT_ADDR}" \
          vault:1.1.0 \
          vault write -field token \
            auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
            secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
        echo ::set-output name=vault-token::$VAULT_TOKEN
        echo ::add-mask::$VAULT_TOKEN
    - name: Get Vault secrets
      id: vault-secret-step
      run: |
        GCR_EMAIL=$(docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
          -e "VAULT_ADDR=${VAULT_ADDR}" \
          vault:1.1.0 \
          vault read -field ci-gcr-sa-email ${VAULT_PATH_GCR})
        GCR_KEY=$(docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
          -e "VAULT_ADDR=${VAULT_ADDR}" \
          vault:1.1.0 \
          vault read -field ci-gcr-sa-key ${VAULT_PATH_GCR})
        echo ::set-output name=gcr-email::$GCR_EMAIL
        echo ::add-mask::$GCR_EMAIL
        echo ::set-output name=gcr-key::$GCR_KEY
        echo ::add-mask::$GCR_KEY
    - name: Auth to GCR
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ steps.vault-secret-step.outputs.gcr-email }}
        service_account_key: ${{ steps.vault-secret-step.outputs.gcr-key }}
    - name: Explicitly auth Docker for GCR
      run: gcloud auth configure-docker --quiet
    - name: Set up AdoptOpenJDK 11
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Construct docker image name and tag
      id: image-name
      run: |
        DOCKER_TAG=""
        if [[ ${{github.event_name == 'pull_request' }} ]]; then
          DOCKER_TAG=pr${{ github.event.number }}-$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)
        elif [[ ${{github.event_name == 'push' }} ]]; then
          DOCKER_TAG=${{ steps.tag.outputs.tag }}
        fi
        echo ::set-output name=name::gcr.io/${GOOGLE_PROJECT}/${SERVICE_NAME}:${DOCKER_TAG}
    - name: Build image locally with jib
      run: "./gradlew jibDockerBuild --image=${{ steps.image-name.outputs.name }}"
    - name: Run Trivy vulnerability scanner
      id: scan-image
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.image-name.outputs.name }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL'
        exit-code: '1'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'
    - name: Abort if vulnerabilities found
      if: ${{ steps.scan-image.outcome != 'success' }}
      run: echo "::set-failed ::Vulnerability scan failed!"
    - name: Push GCR image
      run: "docker push ${{ steps.image-name.outputs.name }}"
    - name: Deploy to Terra Dev environment
      if: github.event_name == 'push'
      uses: broadinstitute/repository-dispatch@master
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: broadinstitute/terra-helmfile
        event-type: update-service
        client-payload: '{"service": "workspacemanager", "version": "${{ steps.tag.outputs.tag }}", "dev_only": true}'
