name: Tag, Publish, and Deploy
# The purpose of the workflow is to:
#  1. Bump the version number and tag the release
#  2. Build and publish the client to Artifactory
#  3. Build docker image and publish to GCR
#  4. Trigger deployment to the dev environment
#
# When run on merge to dev, it tags and bumps the patch version by default. You can
# bump other parts of the version by putting #major, #minor, or #patch in your commit
# message.
#
# When run on a hotfix branch, it tags and generates the hotfix version
#
# When run manually, you can specify the part of the semantic version to bump
#
# The workflow relies on github secrets:
# - REPO_ACCESS_TOKEN - the broadbot token, so we can avoid two reviewer rule on GHA operations
# - GCR_PUBLISH_KEY   - key and email for publishing the docker to GCR
# - GCR_PUBLISH_EMAIL
# - ARTIFACTORY_USERNAME - username and password for publishing the client to artifactory
# - ARTIFACTORY_PASSWORD
on:
  push:
    branches:
    - dev
    paths-ignore:
    - 'README.md'
    - '.github/**'
    - 'local-dev/**'
  workflow_dispatch:
    inputs:
      bump:
        description: 'Part of the version to bump: major, minor, patch'
        required: false
        default: 'patch'
env:
  SERVICE_NAME: ${{ github.event.repository.name }}
  GOOGLE_PROJECT: terra-kernel-k8s
  GKE_CLUSTER: terra-kernel-k8s
jobs:
  tag-publish-job:
    runs-on: ubuntu-latest
    steps:
    - name: Set part of semantic version to bump
      id: semver
      run: |
        SEMVER_PART=""
        if ${{github.event_name == 'push' }}; then
          SEMVER_PART="patch"
        elif ${{github.event_name == 'workflow_dispatch' }}; then
          SEMVER_PART=${{ github.event.inputs.bump }}
        fi
        echo ::set-output name=semver-part::$SEMVER_PART
    - name: Checkout current code
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
    - name: Bump the tag to a new version
      uses: databiosphere/github-actions/actions/bumper@v0.0.3
      id: tag
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        DEFAULT_BUMP: ${{ steps.semver.outputs.semver-part }}
        RELEASE_BRANCHES: dev
        HOTFIX_BRANCHES: hotfix.*
        VERSION_FILE_PATH: build.gradle
        VERSION_LINE_MATCH: "^	version = \".*\""
        VERSION_SUFFIX: SNAPSHOT
    - name: Set up AdoptOpenJDK 11
      uses: joschi/setup-jdk@v2
      with:
        java-version: 11
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
        restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: "Publish to Artifactory"
      run: ./gradlew artifactoryPublish
      env:
        ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        ARTIFACTORY_REPO_KEY: "libs-snapshot-local"
    - name: Auth to GCR
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GCR_PUBLISH_EMAIL }}
        service_account_key: ${{ secrets.GCR_PUBLISH_KEY }}
    - name: Explicitly auth Docker for GCR
      run: gcloud auth configure-docker --quiet
    - name: Construct docker image name and tag
      id: image-name
      run: |
        DOCKER_TAG=${{ steps.tag.outputs.tag }}
        echo ::set-output name=name::gcr.io/${GOOGLE_PROJECT}/${SERVICE_NAME}:${DOCKER_TAG}
    - name: Build image locally with jib
      run: "./gradlew jibDockerBuild --image=${{ steps.image-name.outputs.name }} -Djib.console=plain"
    - name: Run Trivy vulnerability scanner
      uses: broadinstitute/dsp-appsec-trivy-action@v1
      with:
        image: ${{ steps.image-name.outputs.name }}
    - name: Push GCR image
      run: "docker push ${{ steps.image-name.outputs.name }}"
    - name: Deploy to Terra Dev environment
      if: github.event_name == 'push'
      uses: broadinstitute/repository-dispatch@master
      with:
        token: ${{ secrets.REPO_ACCESS_TOKEN }}
        repository: broadinstitute/terra-helmfile
        event-type: update-service
        client-payload: '{"service": "workspacemanager", "version": "${{ steps.tag.outputs.tag }}", "dev_only": false}'
