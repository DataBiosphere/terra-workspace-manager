# This workflow runs the WSM full regression tests, including perf, integration, and
# resilience suites.

name: Nightly Tests

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 7 * * *' # run at 7 AM UTC, 2 AM ET.

jobs:
  nightly-tests:

    runs-on: self-hosted

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v2

      # Sparse check out terra-helmfile repo version directories
      - uses: ./.github/actions/checkout-helm-versions
        with:
          repository: broadinstitute/terra-helmfile
          ref: master
          token: ${{ secrets.BROADBOT_TOKEN }}
          path: integration/terra-helmfile

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          service_account: 'dsp-tools-iap-access@dsp-tools-k8s.iam.gserviceaccount.com'
          # Create `steps.auth.outputs.id_token` that can access Identity Aware Proxy
          token_format: 'id_token'
          id_token_audience: '${{ secrets.IAP_ID_TOKEN_AUDIENCE }}'
          id_token_include_email: true

      # Install postgres:
      # - Create the file repository configuration.
      # - Import the repository signing key.
      # - Update the package lists.
      # - Install the latest version of PostgreSQL. If you want a specific version, use 'postgresql-12' or similar instead of 'postgresql':
      - name: Install the latest postgres
        run: |
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
            sudo sh -c 'curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - '
            sudo apt-get update
            sudo apt-get -y install postgresql

      - name: Set up AdoptOpenJDK 11
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Get Vault token
        id: vault-token-step
        env:
          VAULT_ADDR: https://clotho.broadinstitute.org:8200
        run: |
          VAULT_TOKEN=$(docker run --rm --cap-add IPC_LOCK \
            -e "VAULT_ADDR=${VAULT_ADDR}" \
            vault:1.1.0 \
            vault write -field token \
              auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} \
              secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }})
          echo ::set-output name=vault-token::$VAULT_TOKEN
          echo ::add-mask::$VAULT_TOKEN

      - name: Write config
        id: config
        uses: ./.github/actions/write-config
        with:
          vault-token: ${{ steps.vault-token-step.outputs.vault-token }}
          target: wsmtest

      # The ArgoCD sync triggers the synchronization of the wsmtest cluster. The ArgoCD CLI
      # will wait for the initial sync to complete, but it won't necessarily wait for WSM's
      # new version to actually come fully online--which could take minutes or hours in rare
      # cases. We sleep for two minutes to try to allow WSM to come online.
      # The sync is bracketed by /version probes so we have the pre and post sync versions
      # in the log.
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o ./argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x ./argocd
      - name: ArgoCD sync
        run: |
          version=$(curl https://workspace.wsmtest.integ.envs.broadinstitute.org/version)
          echo "$(date "+%Y-%m-%dT%H:%M:%S") pre-sync wsmtest version: $version"
          ./argocd --grpc-web --server ap-argocd.dsp-devops.broadinstitute.org:443 \
            --auth-token '${{ secrets.WSMTEST_SYNC_ARGOCD_TOKEN }}' \
            --header 'Proxy-Authorization: Bearer ${{ steps.auth.outputs.id_token }}' \
            app sync workspacemanager-wsmtest
          sleep 120
          version=$(curl https://workspace.wsmtest.integ.envs.broadinstitute.org/version)
          echo "$(date "+%Y-%m-%dT%H:%M:%S") post-sync wsmtest version: $version"
      - name: Remove ArgoCD CLI
        if: always()
        run: |
          rm -f ./argocd

      - name: clean databases before integration suite
        if: always()
        uses: ./.github/actions/clean-databases

      - name: Run the integration test suite
        id: integration-test
        if: always()
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/FullIntegration.json

      - name: clean databases before perf suite
        if: always()
        uses: ./.github/actions/clean-databases

      - name: Run the perf test suite
        id: perf-test
        if: always()
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/BasicPerf.json

      - name: clean databases before resiliency suite
        if: always()
        uses: ./.github/actions/clean-databases

      - name: Run the resiliency test suite
        id: resiliency-test
        if: always()
        uses: ./.github/actions/integration-test
        with:
          test-server: workspace-wsmtest.json
          test: suites/BasicResiliency.json

      - name: Compose status message
        if: always()
        id: status-message
        run: |
          L2="Int: ${{ steps.integration-test.outcome }} "
          L3="Perf: ${{ steps.perf-test.outcome }} "
          L4="Res: ${{ steps.resiliency-test.outcome }}"
          text="Link to <https://github.com/DataBiosphere/terra-workspace-manager/actions/runs/$GITHUB_RUN_ID|test run>"
          bold="$L2 | $L3 | $L4"
          if [ "${{ job.status }}" == "success" ]; then
            emoji=":white_check_mark:"
          else
            emoji=":no_entry:"
            text="@channel $text"
          fi
          echo ::set-output name=status-text::$text
          echo ::set-output name=status-bold::$bold
          echo ::set-output name=status-emoji::$emoji

      - name: Notify WSM Slack
        if: always()
        # If we get tired of seeing successes, we can filter to only ping on failures
        uses: broadinstitute/action-slack@v3.8.0
        # see https://github.com/broadinstitute/action-slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: "#terra-wsm-alerts"
          username: "WSM nightly test"
          author_name: ${{ steps.status-message.outputs.status-bold }}
          icon_emoji: ${{ steps.status-message.outputs.status-emoji }}
          text: ${{ steps.status-message.outputs.status-text }}
