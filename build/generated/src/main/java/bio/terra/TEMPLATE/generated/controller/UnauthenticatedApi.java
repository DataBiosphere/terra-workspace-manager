/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package bio.terra.TEMPLATE.generated.controller;

import bio.terra.TEMPLATE.generated.model.SystemStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-13T13:20:17.711576-05:00[America/New_York]")

@Validated
@Api(value = "Unauthenticated", description = "the Unauthenticated API")
public interface UnauthenticatedApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /status
     * Returns the operational status of the service 
     *
     * @return common status response (status code 200)
     *         or common status response (status code 500)
     */
    @ApiOperation(value = "", nickname = "serviceStatus", notes = "Returns the operational status of the service ", response = SystemStatus.class, tags={ "unauthenticated", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "common status response", response = SystemStatus.class),
        @ApiResponse(code = 500, message = "common status response", response = SystemStatus.class) })
    @RequestMapping(value = "/status",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SystemStatus> serviceStatus() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"systems\" : { \"key\" : { \"messages\" : [ \"messages\", \"messages\" ], \"ok\" : true } }, \"ok\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
