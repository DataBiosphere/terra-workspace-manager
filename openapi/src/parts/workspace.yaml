# Workspace paths
paths:
  /api/workspaces/v1:
    post:
      summary: Create a new Workspace.
      operationId: createWorkspace
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequestBody'
      responses:
        '200':
          description: Response to createWorkspace calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedWorkspace'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/NotFound'
    get:
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/MinimumHighestRole'
      summary: List all workspaces a user can read.
      operationId: listWorkspaces
      tags: [ Workspace ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescriptionList'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Get an existing Workspace.
      operationId: getWorkspace
      tags: [Workspace]
      parameters:
      - $ref: '#/components/parameters/MinimumHighestRole'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update an existing Workspace.
      operationId: updateWorkspace
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a Workspace.
      operationId: deleteWorkspace
      tags: [Workspace]
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/workspaceByUserFacingId/{workspaceUserFacingId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceUserFacingId'
      - $ref: '#/components/parameters/MinimumHighestRole'
    get:
      summary: Get an existing Workspace by userFacingId.
      operationId: getWorkspaceByUserFacingId
      tags: [Workspace]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Clone a workspace and its eligible resources
      operationId: cloneWorkspace
      tags: [Workspace]
      requestBody:
        description: Details of workspce clone operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '202':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/clone-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a gcp bucket clone job.
      operationId: getCloneWorkspaceResult
      tags: [Workspace]
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '202':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/policies:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    patch:
      summary: Update policies for a workspace
      operationId: updatePolicies
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WsmPolicyUpdateRequest'
      responses:
        '200':
          description: Update successfully processed. The update itself may or may not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/roles:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Read all IAM roles and their members in a workspace.
      operationId: getRoles
      tags: [Workspace]
      responses:
        '200':
          description: Response to list permissions calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBindingList'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/roles/{role}/members:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Role'
    post:
      summary: Grant an IAM role to a user or group.
      operationId: grantRole
      tags: [Workspace]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantRoleRequestBody'
      responses:
        '204':
          description: Role granted successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/roles/{role}/members/{memberEmail}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Role'
      - $ref: '#/components/parameters/MemberEmail'
    delete:
      summary: Remove an IAM role from a user or group.
      operationId: removeRole
      tags: [Workspace]
      responses:
        '204':
          description: Role removed successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/properties:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: |
        Update the properties in workspace. Only properties with keys in request 
        are updated. Properties with keys not in request are not updated.
      operationId: updateWorkspaceProperties
      tags: [ Workspace ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '204':
          description: properties update sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: |
        delete existing Workspace properties. Only properties with keys in
        request are deleted. Properties with keys not in request are not
        deleted.
      operationId: deleteWorkspaceProperties
      tags: [ Workspace ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyKeys'
      responses:
        '204':
          description: properties delete sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/listValidRegions:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    - $ref: '#/components/parameters/Platform'
    get:
      summary: |
        list valid data centers of a given workspace on a cloud platform.
      operationId: listValidRegions
      tags: [ Workspace ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Regions'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/explainPolicies:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    - $ref: '#/components/parameters/WsmPolicyDepth'
    get:
      summary: Get an explanation of the workspace policies
      operationId: explainPolicies
      tags: [ Workspace ]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyExplainResult'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    CloneWorkspaceResponse:
      description: Response to clone workspace request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneWorkspaceResult'
  parameters:
    Platform:
      name: platform
      in: query
      description: The cloud platform (gcp, azure)
      required: true
      schema:
        type: string
        enum: [ "gcp", "azure" ]
    WsmPolicyDepth:
      name: depth
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/WsmPolicyDepth'
      description: Workspace policy explain depth.
  schemas:
    ClonedWorkspace:
      description: >-
        Flight result class for workspace clone. Indicates status for each resource
        cloned (or skipped).
      type: object
      properties:
        sourceWorkspaceId:
          type: string
          format: uuid
        destinationWorkspaceId:
          type: string
          format: uuid
        destinationUserFacingId:
          $ref: '#/components/schemas/UserFacingId'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceCloneDetails'

    CloneResourceResult:
      type: string
      enum:
        - SUCCEEDED
        - FAILED
        - SKIPPED

    CloneWorkspaceRequest:
      description: >-
        Request body for cloning an entire workspace. Cloning instructions
        are taken from individual resources.
      type: object
      required:
        - spendProfile
      properties:
        destinationWorkspaceId:
          description: |
            Optional identifier for the destination workspace. If not present, a UUID is generated
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the cloned workspace
          type: string
        spendProfile:
          description: ID of provided spend profile
          type: string
        location:
          description: >-
            GCP Location to use for cloud-based resources. If omitted, the location of the source
            resource will be used.
          type: string
        azureContext:
          $ref: '#/components/schemas/AzureContext'

    ResourceCloneDetails:
      description: >-
        A structure to give provenance of a controlled or referenced resource clone
      type: object
      properties:
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        stewardshipType:
          $ref: '#/components/schemas/StewardshipType'
        sourceResourceId:
          description: resource ID of the original resource
          type: string
          format: uuid
        destinationResourceId:
          description: resource ID of the cloned resource, or null if failed or skipped
          type: string
          format: uuid
        result:
          $ref: '#/components/schemas/CloneResourceResult'
        errorMessage:
          description: If result is FAILED, a short description of the cause, if available.
          type: string
        name:
          description: name of the resource (same as source)
          type: string
        description:
          description:  description of the destination resource (same as source)
          type: string

    CloneWorkspaceResult:
      description: >-
        Response for workspace clone, including details on each controlled or referenced resource
        either cloned or attempted to be cloned.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        workspace:
          $ref: '#/components/schemas/ClonedWorkspace'

    CreatedWorkspace:
      type: object
      required: [id]
      properties:
        id:
          description: UUID of a newly-created workspace
          type: string
          format: uuid

    CreateWorkspaceRequestBody:
      type: object
      required: [id]
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
        spendProfile:
          description: ID of provided spend profile
          type: string
        policies:
          $ref: '#/components/schemas/WsmPolicyInputs'
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'
        properties:
          $ref: '#/components/schemas/Properties'
        applicationIds:
          description: List of application ids to enable for this workspace
          type: array
          items:
            type: string

    GrantRoleRequestBody:
      description: The body for a request to grant a role to a single user.
      type: object
      required: [memberEmail]
      properties:
        memberEmail:
          type: string

    IamRole:
      description: Enum containing all valid IAM roles on a Workspace
      type: string
      enum: ['DISCOVERER', 'READER', 'WRITER', 'APPLICATION', 'OWNER']

    RoleBinding:
      description: A binding between an IAM role and users with that role
      type: object
      required: [role]
      properties:
        role:
          $ref: '#/components/schemas/IamRole'
        members:
          description: A list of users that this role applies to
          type: array
          items:
            type: string

    RoleBindingList:
      description: A list of role bindings
      type: array
      items:
        $ref: '#/components/schemas/RoleBinding'

    UpdateWorkspaceRequestBody:
      type: object
      properties:
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string

    UserFacingId:
      description: |
        Human-settable, mutable id. Must have 3-63 characters, contain lowercase letters, numbers, dashes, or
        underscores, and start with lowercase letter or number.
      type: string

    WorkspaceDescription:
      type: object
      required: [id, userFacingId, highestRole, createdBy, lastUpdatedBy, createdDate, lastUpdatedDate]
      properties:
        id:
          description: The ID of the workspace. Immutable.
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
        highestRole:
          description: |
            Highest role of requester. If requester is both reader and writer, writer will be
            returned.
          $ref: '#/components/schemas/IamRole'
        spendProfile:
          description: ID of provided spend profile
          type: string
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'
        gcpContext:
          description: GCP context, if one exists
          $ref: '#/components/schemas/GcpContext'
        azureContext:
          description: Azure context, if one exists
          $ref: '#/components/schemas/AzureContext'
        properties:
          $ref: '#/components/schemas/Properties'
        createdDate:
          description: Timestamp when the workspace is created
          type: string
          format: date-time
        createdBy:
          description: User email of whom created the workspace
          type: string
        lastUpdatedDate:
          description: Timestamp of the latest workspace change
          type: string
          format: date-time
        lastUpdatedBy:
          description: User email of whom made the last update to the workspace
          type: string
        policies:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyInput'

    WorkspaceDescriptionList:
      type: object
      required: [ workspaces ]
      properties:
        workspaces:
          description: A list of workspaces
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceDescription'

    WorkspaceStageModel:
      description: Enum for possible stages of a workspace along the Rawls migration path
      type: string
      enum: ['RAWLS_WORKSPACE', 'MC_WORKSPACE']

    Regions:
      type: array
      description: List of regions (e.g. us-central1, us-west1)
      items:
        uniqueItems: true
        type: string

    WsmPolicyDepth:
      type: integer
      description: Explain source depth.
      minimum: 0
      default: 1

    WsmPolicyExplanation:
      description: |
        Explanation of one policy input, providing the input and the sources
        that were combined to result in the policy. One of the sources can be the
        requested object itself. The policyExplanations may be empty/not present if
        this is a leaf in the explain graph.
      type: object
      required: [workspaceId, policyInput]
      properties:
        workspaceId:
          type: string
          format: uuid
        policyInput:
          $ref: '#/components/schemas/WsmPolicyInput'
        policyExplanations:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyExplanation'

    WsmPolicyWorkspace:
      type: object
      properties:
        workspaceId:
          type: string
          format: uuid
        deleted:
          description: Policy source has been deleted. Policies from the source still apply.
          type: boolean
    WsmPolicyExplainResult:
      type: object
      properties:
        explainWorkspaces:
          description: List of workspace policies referenced in the explanation
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyWorkspace'
        explanation:
          description: One explanation for each policy in the effective policies array
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyExplanation'

