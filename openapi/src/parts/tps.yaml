paths:
  /api/policies/v1/getLocationInfo:
    parameters:
    - $ref: '#/components/parameters/Platform'
    - $ref: '#/components/parameters/WsmPolicyLocation'
    get:
      summary: Get the cloud location info.
      operationId: getLocationInfo
      tags: [policy]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyLocation'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
# Policy schemas
#
# The TPS schema entries here are problematic. Right now, they match the definitions
# in the TPS API. However, they are a part of the WSM API and will remain under
# WSM source control and the versioning of the WSM interface. There is no sync
# with the TPS API.
#
components:
  schemas:
    WsmPolicyComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum: [ 'WSM' ]

    WsmPolicyObjectId:
      description: |
        The Terra object associated with this PAO; for example, a workspace UUID associated 
        with its policy attribute object. Since these are UUIDs, they will not conflict even 
        they are generated by different Terra components.
      type: string
      format: uuid

    WsmPolicyObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum: [ 'workspace' ]

    WsmPolicy:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        component:
          $ref: '#/components/schemas/WsmPolicyComponent'
        objectType:
          $ref: '#/components/schemas/WsmPolicyObjectType'
        attributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        deleted:
          type: boolean
        sourcesObjectIds:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/WsmPolicyObjectId'

    WsmPolicyInputs:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyInput'

    WsmPolicyInput:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyPair'

    WsmPolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    WsmPolicyDescription:
      type: object
      description: Description of a PAO
      required: [ objectId, component, objectType ]
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        component:
          $ref: '#/components/schemas/WsmPolicyComponent'
        objectType:
          $ref: '#/components/schemas/WsmPolicyObjectType'

    WsmPolicyConflict:
      type: object
      description: Describes a policy conflict between two policies
      required: [targetPolicy, conflictPolicy, namespace, name]
      properties:
        namespace:
          description: Namespace of the conflicting policy; e.g., terra
          type: string
        name:
          description: Name of the conflicting policy; e.g., group-constraint
          type: string
        targetPolicy:
          description: The target policy object under change
          $ref: '#/components/schemas/WsmPolicyDescription'
        conflictPolicy:
          description: The policy object attempting to combine the conflicting policy
          $ref: '#/components/schemas/WsmPolicyDescription'

    WsmPolicyUpdateRequest:
      description: Update request body
      type: object
      required: [updateMode]
      properties:
        removeAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        addAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        updateMode:
          $ref: '#/components/schemas/WsmPolicyUpdateMode'

    WsmPolicyUpdateResult:
      type: object
      required: [updateApplied, conflicts]
      properties:
        updateApplied:
          description: |
            true if the update was applied; false if it was not. The response code will be 200
            even if the update was not applied.
          type: boolean
        resultingPolicy:
          description: |
            resulting policy; this reflects the state of the policy as it would be if the update
            was applied. It does not necessarily reflect the policy state in Terra Policy Service
          $ref: '#/components/schemas/WsmPolicy'
        conflicts:
          description: |
            list of conflicts; may be present on success or failure, depending on the updateMode setting
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyConflict'

    WsmPolicyUpdateMode:
      type: string
      description: |
        Enum controlling how policy updates are processed.
        DRY_RUN - conflict checking is done, but no updates are done
        FAIL_ON_CONFLICT - updates are made if there are no conflicts
        ENFORCE_CONFLICT - updates are made and conflicts are propagated
          to policy dependents. (Only valid on policy update.)
      enum: [ 'DRY_RUN', 'FAIL_ON_CONFLICT', 'ENFORCE_CONFLICT' ]

    WsmPolicyLocation:
      description: TPS location object description.
      type: object
      required: [name, description]
      properties:
        name:
          description: The location name
          type: string
        description:
          description: The location description
          type: string
        sublocations:
          description: Sub-locations contained within this location.
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyLocation'
        regions:
          $ref: '#/components/schemas/Regions'
