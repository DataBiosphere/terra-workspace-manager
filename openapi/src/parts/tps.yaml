# Terra Policy Service API
# This API is exposed by the WSM component, so its API definition has to be built in with WSM.
paths:
  # Region policy paths
  #/api/policies/v1alpha1/:

  # TODO: PF-1733 Next step is to add group membership constraint

  # Policy Attribute Object Interface (PAO)
  /api/policy/v1alpha1/pao:
    post:
      summary: Create a policy attribute object
      description: |
        A policy attribute object holds the policy attributes for a Terra component object,
        for example, a workspace or a dataset.
      operationId: createPao
      tags: [Tps]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TpsPaoCreateRequest'
      responses:
        '204':
          description: Policy attribue created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/policy/v1alpha1/pao/{objectId}:
    parameters:
      - $ref: '#/components/parameters/TpsObjectId'
    delete:
      summary: Delete a Policy Attribute Object
      operationId: deletePao
      tags: [Tps]
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      summary: Retrieve a Policy Attribute Object
      operationId: getPao
      tags: [Tps]
      responses:
        '200':
          description: Policy retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TpsPaoGetResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    # Please keep alphabetized
    TpsComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum: [ 'WSM' ]

    TpsObjectId:
      description: |
        The Terra object associated with this PAO; for example, a workspace UUID associated 
        with its policy attribute object. Since these are UUIDs, they will not conflict even 
        they are generated by different Terra components.
      type: string
      format: uuid

    TpsObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum: [ 'workspace' ]

    TpsPaoCloneRequest:
      type: object
      required: [destinationObjectId]
      properties:
        destinationObjectId:
          $ref: '#/components/schemas/TpsObjectId'

    TpsPaoCreateRequest:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        attributes:
          $ref: '#/components/schemas/TpsPolicyInputs'

    TpsPaoGetResult:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        attributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        deleted:
          type: boolean
        sourcesObjectIds:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TpsObjectId'

    TpsPolicyInputs:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyInput'

    TpsPolicyInput:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyPair'

    TpsPolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string

  parameters:
    TpsObjectId:
      name: objectId
      in: path
      description: A UUID to used to identify a policy attribute object in the TPS
      required: true
      schema:
        $ref: '#/components/schemas/TpsObjectId'
