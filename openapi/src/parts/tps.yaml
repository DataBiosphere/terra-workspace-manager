# Policy schemas
#
# The TPS schema entries here are problematic. Right now, they match the definitions
# in the TPS API. However, they are a part of the WSM API and will remain under
# WSM source control and the versioning of the WSM interface. There is no sync
# with the TPS API.
#
components:
  schemas:
    TpsComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum: [ 'WSM' ]

    TpsObjectId:
      description: |
        The Terra object associated with this PAO; for example, a workspace UUID associated 
        with its policy attribute object. Since these are UUIDs, they will not conflict even 
        they are generated by different Terra components.
      type: string
      format: uuid

    TpsObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum: [ 'workspace' ]

    TpsPaoGetResult:
      type: object
      required: [objectId, component, objectType]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'
        attributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        deleted:
          type: boolean
        sourcesObjectIds:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TpsObjectId'

    TpsPolicyInputs:
      type: object
      required: [inputs]
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyInput'

    TpsPolicyInput:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/TpsPolicyPair'

    TpsPolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    TpsPaoDescription:
      type: object
      description: Description of a PAO
      required: [ objectId, component, objectType ]
      properties:
        objectId:
          $ref: '#/components/schemas/TpsObjectId'
        component:
          $ref: '#/components/schemas/TpsComponent'
        objectType:
          $ref: '#/components/schemas/TpsObjectType'

    TpsPaoConflict:
      type: object
      description: Describes a policy conflict between two PAOs
      required: [targetPao, conflictPao, namespace, name]
      properties:
        namespace:
          description: Namespace of the conflicting policy; e.g., terra
          type: string
        name:
          description: Name of the conflicting policy; e.g., group-constraint
          type: string
        targetPao:
          description: The target PAO receiving policy
          $ref: '#/components/schemas/TpsPaoDescription'
        conflictPao:
          description: The PAO attempting to combine the conflicting policy
          $ref: '#/components/schemas/TpsPaoDescription'

    TpsPaoUpdateRequest:
      description: Update request body
      type: object
      required: [updateMode]
      properties:
        removeAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        addAttributes:
          $ref: '#/components/schemas/TpsPolicyInputs'
        updateMode:
          $ref: '#/components/schemas/TpsUpdateMode'

    TpsPaoUpdateResult:
      type: object
      required: [updateApplied, conflicts]
      properties:
        updateApplied:
          description: |
            true if the update was applied; false if it was not. The response code will be 200
            even if the update was not applied.
          type: boolean
        resultingPao:
          description: |
            resulting PAO; this reflects the state of the PAO as it would be if the update
            was applied. It does not necessarily reflect the PAO state in Terra Policy Service
          $ref: '#/components/schemas/TpsPaoGetResult'
        conflicts:
          description: |
            list of conflicts; may be present on success or failure, depending on the updateMode setting
          type: array
          items:
            $ref: '#/components/schemas/TpsPaoConflict'

    TpsUpdateMode:
      type: string
      description: |
        Enum controlling how policy updates are processed.
        DRY_RUN - conflict checking is done, but no updates are done
        FAIL_ON_CONFLICT - updates are made if there are no conflicts
        ENFORCE_CONFLICT - updates are made and conflicts are propagated
          to policy dependents. (Only valid on policy update.)
      enum: [ 'DRY_RUN', 'FAIL_ON_CONFLICT', 'ENFORCE_CONFLICT' ]
