# Workspace paths
paths:
  /api/workspaces/v1/{workspaceId}/folders:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Get all folders in a given workspace
      operationId: listFolders
      tags: [ Folder ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderList'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new folder in a given workspace under given folder
      operationId: createFolder
      tags: [ Folder ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/NotFound'
  /api/workspaces/v1/{workspaceId}/folders/{folderId}:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    - $ref: '#/components/parameters/FolderId'
    get:
      summary: Get an existing Folder.
      operationId: getFolder
      tags: [ Folder ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update an existing folder.
      operationId: updateFolder
      tags: [ Folder ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: |
        Delete a folder asynchronously. OpenAPI does not support request body in 
        DELETE, but async state requires it. Hence this is a POST.
      operationId: deleteFolderAsync
      tags: [ Folder ]
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/folders/{folderId}/result/{jobId}:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    - $ref: '#/components/parameters/FolderId'
    - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to delete a folder.
      operationId: getDeleteFolderResult
      tags: [ Folder ]
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/workspaces/v1/{workspaceId}/folders/{folderId}/properties:
    parameters:
    - $ref: '#/components/parameters/WorkspaceId'
    - $ref: '#/components/parameters/FolderId'
    post:
      operationId: updateFolderProperties
      summary: |
        Update folder properties. Only properties with keys in request are
        updated. Properties with keys not in request are not updated.
      tags: [ Folder ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '204':
          description: Properties update sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: deleteFolderProperties
      tags: [ Folder ]
      summary: |
        Delete folder properties. Only properties with keys in request are
        deleted. Properties with keys not in request are not deleted.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyKeys'
      responses:
        '204':
          description: Properties delete sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    FolderList:
      type: object
      required: [ folders ]
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
    Folder:
      type: object
      required: [ id, displayName, createdBy, createdDate, lastUpdatedBy, lastUpdatedDate ]
      properties:
        id:
          description: The ID of the folder. Immutable.
          $ref: '#/components/schemas/FolderId'
        displayName:
          description: The human readable name of the folder.
          type: string
        description:
          type: string
        parentFolderId:
          $ref: '#/components/schemas/FolderId'
        properties:
          $ref: '#/components/schemas/Properties'
        createdBy:
          description: User email of whom created the folder
          type: string
        createdDate:
          description: Timestamp when the folder is created
          type: string
          format: date-time
        lastUpdatedBy:
          description: User email of whom last updated the folder
          type: string
        lastUpdatedDate:
          description: Timestamp where the folder was last updated
          type: string
          format: date-time
    CreateFolderRequestBody:
      type: object
      required: [ displayName ]
      properties:
        displayName:
          description: |
            The human readable name of the folder. The folder name must be
            unique within its parent folder directories.
          type: string
        description:
          description: A description of the folder
          type: string
        parentFolderId:
          $ref: '#/components/schemas/FolderId'
        properties:
          $ref: '#/components/schemas/Properties'

    UpdateFolderRequestBody:
      type: object
      properties:
        displayName:
          description: The human readable name of the folder
          type: string
        description:
          description: A description of the folder
          type: string
        parentFolderId:
          description: |
            The parent folder id to update this folder to. When null and 
            updateParent is false, do not update. When null and
            updateParent is true, move the folder to be the top-level.
          $ref: '#/components/schemas/FolderId'
        updateParent:
          description: |
            Whether to update parent folder id.
          type: boolean
          default: false

