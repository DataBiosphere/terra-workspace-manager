plugins {
	id "idea"
	id "java"

	id "com.diffplug.spotless" version "5.8.2"
	id "com.github.ben-manes.versions" version "0.36.0"
	id "com.google.cloud.tools.jib" version "2.7.0"
	id "com.palantir.git-version" version "0.12.3"
	id "io.spring.dependency-management" version "1.0.10.RELEASE"
	id "org.hidetake.swagger.generator" version "2.18.2"
	id "org.springframework.boot" version "2.4.0"
	id 'ru.vyarus.quality' version '4.5.0'
	id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_11

allprojects {
	group = "bio.terra"
	version = "0.16.0-SNAPSHOT"
	ext {
		artifactGroup = "${group}.workspace"
		swaggerOutputDir = "${buildDir}/swagger-code"
		resourceDir = "${rootDir}/src/main/resources"
	}

	// specifying versions for dependencies, not adding the dependencies themselves (yet)
	apply plugin: "io.spring.dependency-management"
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
		dependencies {
			dependency group: "bio.terra.cloud-resource-lib", name: "cloud-resource-schema", version: "0.4.0"
			dependency group: "io.swagger.core.v3", name: "swagger-annotations", version: "2.1.6"
			dependency group: "io.swagger.codegen.v3", name: "swagger-codegen-cli", version: "3.0.23"
		}
	}

	apply plugin: "idea"
	idea {
		module {
			generatedSourceDirs = [file("${swaggerOutputDir}/src/main/java")]
			downloadJavadoc = true
		}
	}

	apply plugin: "jacoco"
	jacoco {
		toolVersion = '0.8.2'
		//reportsDirectory = file("$buildDir/reports/jacoco")
	}
}

repositories {
	maven {
		// Terra proxy for maven central
		url "https://broadinstitute.jfrog.io/broadinstitute/maven-central/"
	}
	mavenCentral()
	maven {
		url "https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/"
	}
	maven {
		url "https://broadinstitute.jfrog.io/broadinstitute/libs-release/"
	}
}

dependencies {
	// Terra deps
	implementation group: "bio.terra", name: "datarepo-client", version: "1.0.1-SNAPSHOT"
	implementation group: "bio.terra", name: "stairway", version: "0.0.40-SNAPSHOT"
	implementation group: "bio.terra", name: "terra-common-lib", version: "0.0.25-SNAPSHOT"
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-billing', version: '0.4.0'
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-bigquery', version: '0.4.0'
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-cloudresourcemanager', version: '0.4.0'
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-serviceusage', version: '0.4.0'
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-storage', version: '0.4.0'
	implementation group: 'bio.terra.cloud-resource-lib', name: 'google-iam', version: '0.2.0'
	implementation group: "org.broadinstitute.dsde.workbench", name: "sam-client_2.12", version: "0.1-61135c7"
	implementation group: "bio.terra", name: "terra-resource-buffer-client", version: "0.4.3-SNAPSHOT"

	// Versioned direct deps
	implementation group: "com.google.auto.value", name: "auto-value-annotations", version: "1.7.4"
	implementation group: "com.google.guava", name:"guava", version: "30.0-jre"
	implementation group: "org.hashids", name: "hashids", version: "1.0.3"
	implementation group: "org.liquibase", name: "liquibase-core", version: "4.2.1"
	implementation group: "org.webjars", name: "webjars-locator-core", version: "0.46"
	runtimeOnly group: "org.postgresql", name: "postgresql", version: "42.2.18"

	// Deps whose versions are controlled by Spring
	implementation group: "javax.validation", name: "validation-api"
	implementation group: "org.apache.commons", name: "commons-dbcp2"
	implementation group: "org.apache.commons", name: "commons-lang3"
	implementation group: "org.apache.commons", name: "commons-pool2"
	implementation group: "org.springframework.boot", name: "spring-boot-starter-data-jdbc"
	implementation group: "org.springframework.boot", name: "spring-boot-starter-web"

	// Swagger deps
	implementation group: "io.swagger.core.v3", name: "swagger-annotations"
	runtimeOnly group: "org.webjars.npm", name: "swagger-ui-dist", version: "3.37.2"
	swaggerCodegen group: "io.swagger.codegen.v3", name: "swagger-codegen-cli"

	// Test deps
	testImplementation group: "com.google.auth", name: "google-auth-library-oauth2-http", version: "0.22.1"
	testImplementation group: "io.vavr", name: "vavr", version: "0.10.3"
	testImplementation group: "org.springframework.boot", name: "spring-boot-starter-test"
	testImplementation project(":workspace-manager-client")

	annotationProcessor group: "com.google.auto.value", name: "auto-value", version: "1.7.4"
	annotationProcessor group: "org.springframework.boot", name: "spring-boot-configuration-processor"
}

// To update the lock file, the command is ./gradlew  dependencies --write-locks
dependencyLocking {
	lockAllConfigurations() // see https://docs.gradle.org/current/userguide/dependency_locking.html
}

// for scans
if (hasProperty("buildScan")) {
	buildScan {
		termsOfServiceUrl = "https://gradle.com/terms-of-service"
		termsOfServiceAgree = "yes"
	}
}

// CRL schema extraction
configurations {
	cloudResourceSchema { transitive = false }
}
dependencies {
	cloudResourceSchema group: 'bio.terra.cloud-resource-lib', name: 'cloud-resource-schema'
}
task unzipCloudResourceSchema(type: Copy) {
	from zipTree(configurations.cloudResourceSchema.singleFile).matching {
		include 'cloud_resources_uid.yaml'
	}
	into "${resourceDir}/api/common"
}

// Defs

def generatedResourceDir = "${resourceDir}/generated"
def openapiSourceDir = "${resourceDir}/api"

// OpenAPI/Swagger Server Generation

swaggerSources {
	server {
		inputFile = file("${openapiSourceDir}/service_openapi.yaml")
		code {
			language = "spring"
			library = "spring-boot"
			outputDir = file("${swaggerOutputDir}")
			components = ["models", "apis"]
			rawOptions = [
					"--api-package", "${artifactGroup}.generated.controller",
					"--model-package", "${artifactGroup}.generated.model",
					"--model-name-prefix", "Api",
					"-D", "interfaceOnly=true," +
							"useTags=true," +
							"dateLibrary=java8"
			]
		}
	}
}

// Testing config

// The path to the default Google service account for the Workspace Manager to run as.
// Created by render_config.sh
def googleCredentialsFile = "${projectDir}/rendered/service-account.json"
bootRun {
	environment = [
			'GOOGLE_APPLICATION_CREDENTIALS': "${googleCredentialsFile}"
	]
}
tasks.withType(Test) {
	environment = [
			'GOOGLE_APPLICATION_CREDENTIALS': "${googleCredentialsFile}"
	]
}

jacocoTestReport {
	reports {
		html.enabled = true
		xml.enabled = true
		xml.destination = file("$buildDir/reports/jacoco/test/jacoco.xml")
	}
	dependsOn test
}

 // default test to unit tests so the build target succeeds
test {
	useJUnitPlatform {
		includeTags "unit"
	}
}


task unitTest(type: Test) {
	useJUnitPlatform {
		includeTags "unit"
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
	finalizedBy jacocoTestReport
}

task connectedTest(type: Test) {
	environment.put('TEST_ENV', System.getenv("TEST_ENV"))
	useJUnitPlatform {
		includeTags "connected"
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}


task integrationTest(type: Test) {
	environment.put('TEST_ENV', System.getenv("TEST_ENV"))
	useJUnitPlatform {
		includeTags "integration"
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}

spotless {
	java {
		googleJavaFormat()
		targetExclude "${buildDir}/**"
	}
}

// Custom tasks

task setGitVersion(type: WriteProperties) {
	outputFile = file("${generatedResourceDir}/version.properties")
	property("version.gitHash", versionDetails().gitHash)
	property("version.gitTag", gitVersion())
	property("version.build", version)
}

// Deploy config

jib {
	from {
		// see https://github.com/broadinstitute/dsp-appsec-blessed-images/tree/main/jre
		// Google's distroless images are openjdk, this is the simplest with adoptopenjdk
		image = "us.gcr.io/broad-dsp-gcr-public/base/jre:11-alpine"
	}
	container {
		filesModificationTime = java.time.ZonedDateTime.now().toString() // to prevent ui caching
	}
}

sourceSets.main.java.srcDir "${swaggerOutputDir}/src/main/java"

// Internal dependencies
// Note The Open API schema depends on an external library - cloud-resource-schema, so need to unzip it first.
swaggerSources.server.code.dependsOn tasks.unzipCloudResourceSchema
swaggerSources.server.ui.dependsOn tasks.unzipCloudResourceSchema
compileJava.dependsOn swaggerSources.server.code, spotlessApply, setGitVersion
clean.dependsOn cleanSetGitVersion

apply from: "$rootDir/gradle/quality.gradle"
