plugins {
	id 'idea'
	id 'java'
	id 'java-library'

	id 'com.diffplug.gradle.spotless' version '4.4.0'
	id 'com.github.ben-manes.versions' version '0.28.0'
	id 'com.google.cloud.tools.jib' version '2.4.0'
	id 'com.palantir.git-version' version '0.12.3'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id 'org.springframework.boot' version '2.3.1.RELEASE'
}

group = 'bio.terra.workspace'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven {
		url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
	}
	maven {
		url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
	}
}

dependencies {
	implementation group: 'bio.terra', name: 'datarepo-client', version: '1.0.1-SNAPSHOT'
	implementation group: 'bio.terra', name: 'stairway', version: '0.0.4.1-SNAPSHOT'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
	implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
	implementation group: 'org.broadinstitute.dsde.workbench', name: 'sam-client_2.12', version: '0.1-3a0df80'
	implementation group: 'org.hashids', name: 'hashids', version: '1.0.3'
	implementation group: 'org.liquibase', name: 'liquibase-core', version: '3.9.0'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

	implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.1.3'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.20'
	swaggerUI 'org.webjars:swagger-ui:3.28.0'

	testImplementation(group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.21.0')
	testImplementation(group: 'io.vavr', name: 'vavr', version: '0.10.3')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation project(':terra-workspace-manager-client')

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
	exclude group: "commons-logging", module: "commons-logging"
}

// Defs

def generatedResourceDir = "${projectDir}/src/main/resources/generated"
def openapiSourceDir = "${projectDir}/src/main/resources/api"

// for scans
if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

// OpenAPI/Swagger Server Generation

swaggerSources {
	server {
		inputFile = file("${openapiSourceDir}/service_openapi.yaml")
		code {
			language = "spring"
			library = "spring-boot"
			outputDir = file("${buildDir}")
			components = ['models', 'apis']
			rawOptions = [
					"--api-package", "${this.group}.generated.controller",
					"--model-package", "${this.group}.generated.model",
					"-D", "interfaceOnly=true," +
							"defaultInterfaces=false," +
							"useTags=true," +
							"dateLibrary=java8"
			]
		}
		ui {
			outputDir = file("${generatedResourceDir}/swagger-ui")
			doLast {
				copy {
					from "${openapiSourceDir}"
					into "${outputDir}"
				}
			}

			outputs.upToDateWhen { false }
		}
	}
}

// Testing config

test {
	useJUnitPlatform()
}

task unitTest(type: Test) {
	useJUnitPlatform {
		includeTags 'unit'
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}

spotless {
	java {
		googleJavaFormat()
		targetExclude 'build/**'
	}
}

// Custom tasks

task setGitVersion(type: WriteProperties) {
	outputFile = file("${generatedResourceDir}/version.properties")
	property('git.hash', versionDetails().gitHash)
	property('git.tag', gitVersion())
}

// Internal dependencies

sourceSets.main.java.srcDir "${swaggerSources.server.code.outputDir}/src"
compileJava.dependsOn swaggerSources.server.code, spotlessApply, setGitVersion

processResources.dependsOn swaggerSources.server.ui

clean.dependsOn cleanSetGitVersion, cleanGenerateSwaggerUIServer

idea {
	module {
		generatedSourceDirs = [file('build/src'), file('terra-workspace-manager-client/build/src')]

		downloadJavadoc = true
	}
}
