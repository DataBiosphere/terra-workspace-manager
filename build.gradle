buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'com.google.cloud.tools.jib' version '2.4.0'
	id 'org.openapi.generator' version '4.3.1'
	id 'com.diffplug.gradle.spotless' version '4.4.0'
	id "com.github.ben-manes.versions" version '0.28.0'
	id 'com.palantir.git-version' version '0.12.3'
}

group = 'bio.terra.workspace'
version = '0.0.3-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
	maven {
		url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
	}
	maven {
		url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
	}
}

dependencies {
	implementation group: 'bio.terra', name: 'stairway', version: '0.0.4.1-SNAPSHOT'
	implementation group: 'bio.terra', name: 'datarepo-client', version: '1.0.1-SNAPSHOT'
	implementation group: 'org.broadinstitute.dsde.workbench', name: 'sam-client_2.12', version: '0.1-3a0df80'
	implementation group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	implementation group: 'io.opencensus', name: 'opencensus-api', version: '0.26.0'
	implementation group: 'io.opencensus', name: 'opencensus-exporter-trace-stackdriver', version: '0.26.0'
	implementation group: 'io.opencensus', name: 'opencensus-impl', version: '0.26.0'
	runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.2.14'
	implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
	implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
	implementation group: 'org.liquibase' , name: 'liquibase-core', version: '3.9.0'
	implementation group: 'org.webjars', name: 'webjars-locator-core', version: '0.46'
	implementation group: 'org.webjars', name: 'swagger-ui', version: '3.28.0'
	implementation group: 'bio.terra', name: 'terra-workspace-manager-client', version: '0.0.3-SNAPSHOT'
	implementation group: 'org.hashids', name: 'hashids', version: '1.0.3'

	// -- OpenAPI CodeGen dependencies --
	// TODO: this version of swagger-annotations is old, but the code gen is still relying on it
	//  There is an open bug tracking the fix: https://github.com/OpenAPITools/openapi-generator/issues/4245
	implementation group: 'io.swagger', name: 'swagger-annotations', version: '1.6.1'
	implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: '0.2.1'
	// -- --

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation(group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.21.0')
	testImplementation(group: 'io.vavr', name: 'vavr', version: '0.10.3')

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

task setGitVersion(type: WriteProperties) {
	outputFile = file('src/main/resources/generated/version.properties')
	property('git.hash', versionDetails().gitHash)
	property('git.tag', gitVersion())
}

// for scans
if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

// Exclude the Spring logger, so everything will use SLF4J
configurations.all {
	exclude group: "commons-logging", module: "commons-logging"
}

// OpenAPI Server Generation
// - specify the source and target
// - define the generation
// - define the validation
// - define dependencies to include the generated code

def openapiSourceFile = "${projectDir}/src/main/resources/api/service_openapi.yaml"
def openapiTargetDir = "${buildDir}/generated"

openApiGenerate {
	generatorName = "spring"
	inputSpec = "${openapiSourceFile}".toString()
	outputDir = "${openapiTargetDir}".toString()
	packageName = "${group}"
	apiPackage = "${group}.generated.controller"
	modelPackage = "${group}.generated.model"
	configOptions = [
	        interfaceOnly : "true",
			useTags : "true",
			library : "spring-boot",
			dateLibrary : "java8",
			generateApiTests : "false",
			generateApiDocumentation : "false",
			generateModelTests : "false",
			generateModelDocumentation : "false",
	]
}

openApiValidate {
	inputSpec = "${openapiSourceFile}".toString()
}

// Note: Spotless deletes the classes OpenApi generates.
// The order needs to be spotlessApply -> openApiGenerate -> build/test/run
tasks.openApiGenerate.dependsOn tasks.spotlessApply
compileJava.dependsOn tasks.setGitVersion
compileJava.dependsOn tasks.openApiGenerate
sourceSets.main.java.srcDir "${openapiTargetDir}/src/main/java"
ideaModule.dependsOn tasks.openApiGenerate

// end of OpenAPI Server Generation

test {
	useJUnitPlatform()
}

task unitTest(type: Test) {
	useJUnitPlatform {
		includeTags 'unit'
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
	useJUnitPlatform {
		includeTags 'integration'
	}
	testLogging {
		events = ["passed", "failed", "skipped", "started"]
	}
	outputs.upToDateWhen { false }
}

spotless {
	java {
		googleJavaFormat()
	}
}

